<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Loretta.CodeAnalysis.Lua</name>
    </assembly>
    <members>
        <member name="T:Loretta.CodeAnalysis.Lua.ContinueType">
            <summary>
            The type of continue the lua flavor being parsed has.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.ContinueType.None">
            <summary>
            No continue.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.ContinueType.Keyword">
            <summary>
            Continue is a keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.ContinueType.ContextualKeyword">
            <summary>
            Continue is a contextual keyword (is only a keyword when used as a statement).
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaDiagnosticFormatter">
            <summary>
            The Lua diagnostic formatter.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaDiagnosticFormatter.Instance">
            <summary>
            The diagnostic formatter instance.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaExtensions">
            <summary>
            Extension methods for lua specific data.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.IsLuaKind(System.Int32)">
            <summary>
            Determines if the given raw kind value belongs to the C# <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> enumeration.
            </summary>
            <param name="rawKind">The raw value to test.</param>
            <returns><see langword="true"/> when the raw value belongs to the C# syntax kind; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.Kind(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Returns <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> for <see cref="T:Loretta.CodeAnalysis.SyntaxToken"/> from <see cref="P:Loretta.CodeAnalysis.SyntaxToken.RawKind"/> property.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.Kind(Loretta.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Returns <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> for <see cref="T:Loretta.CodeAnalysis.SyntaxTrivia"/> from <see cref="P:Loretta.CodeAnalysis.SyntaxTrivia.RawKind"/> property.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.Kind(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Returns <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> for <see cref="T:Loretta.CodeAnalysis.SyntaxNode"/> from <see cref="P:Loretta.CodeAnalysis.SyntaxNode.RawKind"/> property.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.Kind(Loretta.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Returns <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> for <see cref="T:Loretta.CodeAnalysis.SyntaxNode"/> from <see cref="P:Loretta.CodeAnalysis.SyntaxNodeOrToken.RawKind"/> property.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.IsKeyword(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Returns whether the provided <see cref="T:Loretta.CodeAnalysis.SyntaxToken"/> is a Lua keyword.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.IsVerbatimStringLiteral(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Returns whether a <see cref="T:Loretta.CodeAnalysis.SyntaxToken"/> is a verbatim string literal.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.Insert(Loretta.CodeAnalysis.SyntaxTokenList,System.Int32,Loretta.CodeAnalysis.SyntaxToken[])">
            <summary>
            Insert one or more tokens in the list at the specified index.
            </summary>
            <returns>A new list with the tokens inserted.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.ReplaceTrivia(Loretta.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxTrivia},System.Func{Loretta.CodeAnalysis.SyntaxTrivia,Loretta.CodeAnalysis.SyntaxTrivia,Loretta.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a new token with the specified old trivia replaced with computed new trivia.
            </summary>
            <param name="token"></param>
            <param name="trivia">The trivia to be replaced; descendants of the root token.</param>
            <param name="computeReplacementTrivia">A function that computes a replacement trivia for
            the argument trivia. The first argument is the original trivia. The second argument is
            the same trivia rewritten with replaced structure.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.ReplaceTrivia(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxTrivia,Loretta.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a new token with the specified old trivia replaced with a new trivia. The old trivia may appear in
            the token's leading or trailing trivia.
            </summary>
            <param name="token"></param>
            <param name="oldTrivia">The trivia to be replaced.</param>
            <param name="newTrivia">The new trivia to use in the new tree in place of the old
            trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.AsSeparatedList``1(Loretta.CodeAnalysis.SyntaxNodeOrTokenList)">
            <summary>
            Returns this list as a <see cref="T:Loretta.CodeAnalysis.SeparatedSyntaxList`1"/>.
            </summary>
            <typeparam name="TOther">The type of the list elements in the separated list.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaExtensions.GetCompilationUnitRoot(Loretta.CodeAnalysis.SyntaxTree,System.Threading.CancellationToken)">
            <summary>
            Obtains the root as a <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax"/>.
            </summary>
            <param name="tree"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaParseOptions">
            <summary>
            This class stores several source parsing related options and offers access to their values.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaParseOptions.Default">
            <summary>
            The default parse options.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.#ctor(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions)">
            <summary>
            Initializes a new set of parse options.
            </summary>
            <param name="syntaxOptions"></param>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaParseOptions.SyntaxOptions">
            <summary>
            The <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions"/> to use when parsing.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaParseOptions.DocumentationMode">
            <summary>
            <b><see cref="P:Loretta.CodeAnalysis.Lua.LuaParseOptions.DocumentationMode"/> does nothing currently.</b>
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaParseOptions.Language">
            <inheritdoc/>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaParseOptions.Features">
            <summary>
            <b>The features flag don't do anything currently.</b>
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.WithDocumentationMode(Loretta.CodeAnalysis.DocumentationMode)">
            <summary>
            <inheritdoc cref="M:Loretta.CodeAnalysis.ParseOptions.WithDocumentationMode(Loretta.CodeAnalysis.DocumentationMode)"/>.
            <b><see cref="T:Loretta.CodeAnalysis.DocumentationMode"/> does nothing currently.</b>
            </summary>
            <param name="documentationMode"><inheritdoc cref="M:Loretta.CodeAnalysis.ParseOptions.WithDocumentationMode(Loretta.CodeAnalysis.DocumentationMode)"/>.</param>
            <returns><inheritdoc cref="M:Loretta.CodeAnalysis.ParseOptions.WithDocumentationMode(Loretta.CodeAnalysis.DocumentationMode)"/>.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            <inheritdoc cref="M:Loretta.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})"/>
            <b>Feature flags don't do anything currently.</b>
            </summary>
            <param name="features"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.WithSyntaxOptions(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions)">
            <summary>
            Creates a new instance with the syntax options replaced by the provided ones.
            </summary>
            <param name="syntaxOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.CommonWithDocumentationMode(Loretta.CodeAnalysis.DocumentationMode)">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.CommonWithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.Equals(Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaParseOptions.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_AmbiguousFunctionCallOrNewStatement">
            <summary>
              Looks up a localized string similar to Syntax ambiguous between a function call and a new statement.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_BadCharacter">
            <summary>
              Looks up a localized string similar to Bad character input: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_BadDocumentationMode">
            <summary>
              Looks up a localized string similar to Provided documentation mode is unsupported or invalid: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_BinaryNumericLiteralNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Binary numeric literals are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_BitwiseOperatorsNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Bitwise operators are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_CannotBeAssignedTo">
            <summary>
              Looks up a localized string similar to This expression cannot be assigned to.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_CCommentsNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to C comments are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_CloseParenExpected">
            <summary>
              Looks up a localized string similar to ) expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_CompoundAssignmentNotSupportedInLuaVersion">
            <summary>
              Looks up a localized string similar to Compound assignments are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_DoubleOverflow">
            <summary>
              Looks up a localized string similar to Constant represents a value either too large or too small for a double precision floating-point number.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_EscapeTooLarge">
            <summary>
              Looks up a localized string similar to Escape is too large, the limit is {0}.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_ExpressionExpected">
            <summary>
              Looks up a localized string similar to Expression expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_HashStringsNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Hash strings are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_HexDigitExpected">
            <summary>
              Looks up a localized string similar to Hexadecimal digit expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_HexFloatLiteralNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Hexadecimal floating point numeric literals are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_HexStringEscapesNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Hexadecimal string escapes are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_IdentifierExpected">
            <summary>
              Looks up a localized string similar to Identifier expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_IdentifierExpectedKW">
            <summary>
              Looks up a localized string similar to Identifier expected; &apos;{1}&apos; is a keyword.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_IfExpressionConditionExpected">
            <summary>
              Looks up a localized string similar to Condition not found for if expression.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_IfExpressionConditionExpected_Description">
            <summary>
              Looks up a localized string similar to If expressions require a condition but one was not found, did you perhaps forget to specify one?.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_IfExpressionConditionExpected_Title">
            <summary>
              Looks up a localized string similar to If expressions require a condition.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_IfExpressionsNotSupportedInLuaVersion">
            <summary>
              Looks up a localized string similar to If expressions are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_InsufficientStack">
            <summary>
              Looks up a localized string similar to An expression is too long or complex to compile.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_InvalidExpressionPart">
            <summary>
              Looks up a localized string similar to Invalid expression part &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_InvalidNumber">
            <summary>
              Looks up a localized string similar to Invalid number.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_InvalidStatement">
            <summary>
              Looks up a localized string similar to Invalid statement.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_InvalidStringEscape">
            <summary>
              Looks up a localized string similar to Invalid string escape.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_LbraceExpected">
            <summary>
              Looks up a localized string similar to { expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_LuajitIdentifierRulesNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Identifiers containing characters with value above 0x7F are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_NonFunctionCallBeingUsedAsStatement">
            <summary>
              Looks up a localized string similar to Function calls are the only expressions that can be used as statements.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_NumericLiteralTooLarge">
            <summary>
              Looks up a localized string similar to Numeric literal is too large.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_OctalNumericLiteralNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Octal numeric literals are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_RbraceExpected">
            <summary>
              Looks up a localized string similar to } expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_SemicolonExpected">
            <summary>
              Looks up a localized string similar to ; expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_ShebangNotSupportedInLuaVersion">
            <summary>
              Looks up a localized string similar to Shebangs are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error, &apos;{0}&apos; expected.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnderscoreInNumericLiteralNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to Underscores in numeric literals are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnescapedLineBreakInString">
            <summary>
              Looks up a localized string similar to Unescaped line break in string.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnexpectedToken">
            <summary>
              Looks up a localized string similar to Unexpected token &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnfinishedLongComment">
            <summary>
              Looks up a localized string similar to Unfinished multi-line comment.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnfinishedString">
            <summary>
              Looks up a localized string similar to Unfinished string.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnicodeEscapeMissingCloseBrace">
            <summary>
              Looks up a localized string similar to Unicode escape must have a closing brace (&apos;}&apos;) after the hexadecimal number.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnicodeEscapeMissingOpenBrace">
            <summary>
              Looks up a localized string similar to Unicode escape must have an opening brace (&apos;{&apos;) after &apos;\u&apos;.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_UnicodeEscapesNotSupportedLuaInVersion">
            <summary>
              Looks up a localized string similar to Unicode escapes are not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ERR_WhitespaceEscapeNotSupportedInVersion">
            <summary>
              Looks up a localized string similar to The whitespace escape (&apos;\z&apos;) is not supported in this lua version.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.ThisMethodCanOnlyBeUsedToCreateTokens">
            <summary>
              Looks up a localized string similar to This method can only be used to create tokens - {0} is not a token kind..
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.UseIdentifierToCreateIdentifiers">
            <summary>
              Looks up a localized string similar to Use Loretta.CodeAnalysis.Lua.SyntaxFactory.Identifier to create identifier tokens..
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.UseLiteralForNumeric">
            <summary>
              Looks up a localized string similar to Use Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal to create numeric literal tokens..
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.WRN_LineBreakMayAffectErrorReporting">
            <summary>
              Looks up a localized string similar to This line break (\n\r) may affect error reporting between the editor and lua.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.WRN_LineBreakMayAffectErrorReporting_Description">
            <summary>
              Looks up a localized string similar to Lua considers &apos;\n\r&apos; a single line break so error reporting between the editor and Lua may differ; use \n, \r or \r\n instead.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaResources.WRN_LineBreakMayAffectErrorReporting_Title">
            <summary>
              Looks up a localized string similar to Line break may affect error reporting.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions">
            <summary>
            The options used by Loretta to adapt to the syntax of the lua flavor being parsed.
            </summary>
            <remarks>
            Otherwise when noted, "Accept" in this class means not generating an error when parsing,
            but the syntax behind the option will still be parsed normally.
            </remarks>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.Lua51">
            <summary>
            The Lua 5.1 preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.Lua52">
            <summary>
            The Lua 5.2 preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.Lua53">
            <summary>
            The Lua 5.3 preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaJIT20">
            <summary>
            The LuaJIT 2.0 preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.LuaJIT21">
            <summary>
            The LuaJIT 2.1-beta3 preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.GMod">
            <summary>
            The GLua preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.Roblox">
            <summary>
            The Luau preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.FiveM">
            <summary>
            The FiveM preset.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.All">
            <summary>
            The preset that sets everything to true and continue to <see
            cref="F:Loretta.CodeAnalysis.Lua.ContinueType.ContextualKeyword" />.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AllPresets">
            <summary>
            All presets that are preconfigured in <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions"/>.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Loretta.CodeAnalysis.Lua.ContinueType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new lua options set.
            </summary>
            <param name="acceptBinaryNumbers"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBinaryNumbers" path="/summary" /></param>
            <param name="acceptCCommentSyntax"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCCommentSyntax" path="/summary" /></param>
            <param name="acceptCompoundAssignment"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCompoundAssignment" path="/summary" /></param>
            <param name="acceptEmptyStatements"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptEmptyStatements" path="/summary" /></param>
            <param name="acceptCBooleanOperators"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCBooleanOperators" path="/summary" /></param>
            <param name="acceptGoto"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptGoto" path="/summary" /></param>
            <param name="acceptHexEscapesInStrings"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexEscapesInStrings" path="/summary" /></param>
            <param name="acceptHexFloatLiterals"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexFloatLiterals" path="/summary" /></param>
            <param name="acceptOctalNumbers"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptOctalNumbers" path="/summary" /></param>
            <param name="acceptShebang"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptShebang" path="/summary" /></param>
            <param name="acceptUnderscoreInNumberLiterals"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnderscoreInNumberLiterals" path="/summary" /></param>
            <param name="useLuaJitIdentifierRules"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.UseLuaJitIdentifierRules" path="/summary" /></param>
            <param name="acceptBitwiseOperators"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBitwiseOperators" path="/summary"/></param>
            <param name="acceptWhitespaceEscape"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptWhitespaceEscape" path="/summary"/></param>
            <param name="acceptUnicodeEscape"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnicodeEscape" path="/summary"/></param>
            <param name="continueType"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.ContinueType" path="/summary" /></param>
            <param name="acceptIfExpression"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptIfExpressions" path="/summary" /></param>
            <param name="acceptHashStrings"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHashStrings" path="/summary" /></param>
            <param name="acceptInvalidEscapes"><inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptInvalidEscapes" path="/summary" /></param>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBinaryNumbers">
            <summary>
            Whether to accept binary numbers (format: /0b[10]+/).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCCommentSyntax">
            <summary>
            Whether to accept C comment syntax (formats: "//..." and "/* ... */").
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCompoundAssignment">
            <summary>
            Whether to accept compound assignment syntax
            (format: &lt;expr&gt; ("+=" | "-=" | "*=" | "/=" | "^=" | "%=" | "..=") &lt;expr&gt;).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptEmptyStatements">
            <summary>
            Whether to accept empty statements (lone semicolons).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCBooleanOperators">
            <summary>
            Whether to accept C boolean operators (&amp;&amp;, ||, != and !).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptGoto">
            <summary>
            Whether to accept goto labels and statements.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexEscapesInStrings">
            <summary>
            Whether to accept hexadecimal escapes in strings.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexFloatLiterals">
            <summary>
            Whether to accept hexadecimal floating point literals
            (format: /0x[a-fA-F0-9]+(\.[a-fA-F0-9])?([+-]?p[0-9]+)/).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptOctalNumbers">
            <summary>
            Whether to accept octal numbers (format: /0o[0-7]+/).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptShebang">
            <summary>
            Whether to accept shebangs (format: "#!...").
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnderscoreInNumberLiterals">
            <summary>
            Whether to accept underscores in any number literals (will be ignored when parsing the number).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.UseLuaJitIdentifierRules">
            <summary>
            Whether to use LuaJIT's identifier character rules (accepts any character greater than
            or equal to 0xF7).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBitwiseOperators">
            <summary>
            Whether to accept 5.3 bitise operators.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptWhitespaceEscape">
            <summary>
            Whether to accept <c>\z</c> escapes.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnicodeEscape">
            <summary>
            Whether to accept Unicode (<c>\u{XXX}</c>) escapes.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.ContinueType">
            <summary>
            The type of continue to be recognized by the parser.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptIfExpressions">
            <summary>
            Whether to accept Luau if expressions.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHashStrings">
            <summary>
            Whether to accept FiveM hash strings.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptInvalidEscapes">
            <summary>
            Whether to support the Lua 5.1 lexer bug where invalid
            escapes in strings are read as the character in the escape.
            <para>
              NO ERROR WILL BE EMITTED IF AN INVALID ESCAPE IS ENCOUNTERED
              IF THIS IS <see langword="true"/>.
            </para>
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.With(Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{Loretta.CodeAnalysis.Lua.ContinueType},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean},Tsu.Option{System.Boolean})">
            <summary>
            Creates a new lua options changing the provided fields.
            </summary>
            <param name="acceptBinaryNumbers">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBinaryNumbers" path="/summary" /> If None uses the value of <see
            cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBinaryNumbers" />.
            </param>
            <param name="acceptCCommentSyntax">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCCommentSyntax" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCCommentSyntax" />.
            </param>
            <param name="acceptCompoundAssignment">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCompoundAssignment" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCompoundAssignment" />.
            </param>
            <param name="acceptEmptyStatements">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptEmptyStatements" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptEmptyStatements" />.
            </param>
            <param name="acceptCBooleanOperators">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCBooleanOperators" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptCBooleanOperators" />.
            </param>
            <param name="acceptGoto">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptGoto" path="/summary" /> If None uses the value of <see
            cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptGoto" />.
            </param>
            <param name="acceptHexEscapesInStrings">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexEscapesInStrings" path="/summary" /> If None uses the value
            of <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexEscapesInStrings" />.
            </param>
            <param name="acceptHexFloatLiterals">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexFloatLiterals" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHexFloatLiterals" />.
            </param>
            <param name="acceptOctalNumbers">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptOctalNumbers" path="/summary" /> If None uses the value of <see
            cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptOctalNumbers" />.
            </param>
            <param name="acceptShebang">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptShebang" path="/summary" /> If None uses the value of <see
            cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptShebang" />.
            </param>
            <param name="acceptUnderscoreInNumberLiterals">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnderscoreInNumberLiterals" path="/summary" /> If None uses the
            value of <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnderscoreInNumberLiterals" />.
            </param>
            <param name="useLuaJitIdentifierRules">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.UseLuaJitIdentifierRules" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.UseLuaJitIdentifierRules" />.
            </param>
            <param name="acceptBitwiseOperators">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBitwiseOperators" path="/summary"/> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptBitwiseOperators"/>.
            </param>
            <param name="acceptWhitespaceEscape">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptWhitespaceEscape" path="/summary"/> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptWhitespaceEscape"/>.
            </param>
            <param name="acceptUnicodeEscape">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnicodeEscape" path="/summary"/> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptUnicodeEscape"/>.
            </param>
            <param name="continueType">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.ContinueType" path="/summary" /> If None uses the value of <see
            cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.ContinueType" />.
            </param>
            <param name="acceptIfExpression">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptIfExpressions" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptIfExpressions" />.
            </param>
            <param name="acceptHashStrings">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHashStrings" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptHashStrings" />.
            </param>
            <param name="acceptInvalidEscapes">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptInvalidEscapes" path="/summary" /> If None uses the value of
            <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.AcceptInvalidEscapes" />.
            </param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.Equals(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.op_Equality(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions,Loretta.CodeAnalysis.Lua.LuaSyntaxOptions)">
            <summary>
            Checks whether two lua option sets are equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxOptions.op_Inequality(Loretta.CodeAnalysis.Lua.LuaSyntaxOptions,Loretta.CodeAnalysis.Lua.LuaSyntaxOptions)">
            <summary>
            Checks whether two lua option sets are not equal.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.Blender._newPosition">
             <summary>
             newPosition represents the position we are in the final SourceText.  As we consume and reuse
             nodes from the old tree we will update our position in the new text accordingly.
             Likewise, when we must lex tokens out of the new tree we will update as well.
            
             NOTE(cyrusn): We do not need an oldPosition because it is redundant given the
             oldTreeCursor.  The oldPosition is implicitly defined by the position of the cursor.
             </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.Blender.ExtendToAffectedRange(Loretta.CodeAnalysis.Lua.LuaSyntaxNode,Loretta.CodeAnalysis.Text.TextChangeRange)">
            <summary>
            Affected range of a change is the range within which nodes can be affected by a change
            and cannot be reused. Because of lookahead effective range of a change is larger than
            the change itself.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.Blender.Cursor">
             <summary>
             THe cursor represents a location in the tree that we can move around to indicate where
             we are in the original tree as we're incrementally parsing.  When it is at a node or
             token, it can either move forward to that entity's next sibling.  It can also move down
             to a node's first child or first token.
            
             Once the cursor hits the end of file, it's done.  Note: the cursor will skip any other
             zero length nodes in the tree.
             </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LanguageParser.CreateMissingIdentifierName">
            <summary>
            Creates a missing <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IdentifierNameSyntax"/>.
            Used for places where we expected an expression but got something else.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LanguageParser.CreateMissingIdentifierToken">
            <summary>
            Creates a missing identifier <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken"/>.
            Used for places where we expected a token but got something else.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SourceTextReader.Position">
            <summary>
            The reader's position. Guarantees the position is in the range [0, Length].
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SourceTextReader.Length">
            <summary>
            The length of the text
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxParser.TryEatToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns and consumes the current token if it has the requested <paramref name="kind"/>.
            Otherwise, returns <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxParser.AddSkippedSyntax(Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken,Loretta.CodeAnalysis.GreenNode,System.Boolean)">
            <summary>
            Converts skippedSyntax node into tokens and adds these as trivia on the target token.
            Also adds the first error (in depth-first preorder) found in the skipped syntax tree to the target token.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxParser.FindOffset(Loretta.CodeAnalysis.GreenNode,Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxNode,System.Int32@)">
            <summary>
            This function searches for the given location node within the subtree rooted at root node.
            If it finds it, the function computes the offset span of that child node within the root and returns true,
            otherwise it returns false.
            </summary>
            <param name="root">Root node</param>
            <param name="location">Node to search in the subtree rooted at root node</param>
            <param name="offset">Offset of the location node within the subtree rooted at child</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxParser.IsMakingProgress(System.Int32@,System.Boolean)">
            <summary>
            Whenever parsing in a <c>while (true)</c> loop and a bug could prevent the loop from making progress,
            this method can prevent the parsing from hanging.
            Use as:
                int tokenProgress = -1;
                while (IsMakingProgress(ref tokenProgress))
            It should be used as a guardrail, not as a crutch, so it asserts if no progress was made.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IdentifierNameSyntax">
            <summary>A name expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IdentifierNameSyntax.Identifier">
            <summary>The identifier.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxNode.GetStructure(Loretta.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Gets the syntax node represented the structure of this trivia, if any. The HasStructure property can be used to 
            determine if this trivia has structure.
            </summary>
            <returns>
            A LuaSyntaxNode derived from StructuredTriviaSyntax, with the structured view of this trivia node. 
            If this trivia node does not have structure, returns null.
            </returns>
            <remarks>
            Some types of trivia have structure that can be accessed as additional syntax nodes.
            <c>However, currently, there are none.</c>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxWalker.Depth">
            <summary>
            The depth up to which the walker should go into.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxWalker.#ctor(Loretta.CodeAnalysis.SyntaxWalkerDepth)">
            <summary>
            Initializes the syntax walker with hte provided depth.
            </summary>
            <param name="depth"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxWalker.Visit(Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxNode)">
            <summary>
            Called when the syntax walker visits a node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxWalker.DefaultVisit(Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxNode)">
            <summary>
            Called when the walker walks into a node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxWalker.VisitToken(Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken)">
            <summary>
            Called when the walker visits a token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxWalker.VisitLeadingTrivia(Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken)">
            <summary>
            Called when the walker should visit the leading trivia of a token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LuaSyntaxWalker.VisitTrailingTrivia(Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken)">
            <summary>
            Called when the walker should visit the trailing trivia of a token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SyntaxToken.ToString">
            <summary>
            Returns the string representation of this token, not including its leading and trailing trivia.
            </summary>
            <returns>The string representation of this token, not including its leading and trailing trivia.</returns>
            <remarks>The length of the returned string is always the same as Span.Length</remarks>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.StatementListSyntax">
            <summary>Represents a block of code.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.StatementListSyntax.Statements">
            <summary>The list of statements contained within this block.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParameterSyntax">
            <summary>The base type for parameter nodes.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NamedParameterSyntax">
            <summary>Represents a named function parameter.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NamedParameterSyntax.Identifier">
            <summary>The name of the parameter.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.VarArgParameterSyntax">
            <summary>Represents a vararg function parameter.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.VarArgParameterSyntax.VarArgToken">
            <summary>The vararg token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParameterListSyntax">
            <summary>Represents a function declaration's parameter list.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParameterListSyntax.OpenParenthesisToken">
            <summary>The parameter list opening parenthesis.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParameterListSyntax.Parameters">
            <summary>The parameter list opening parenthesis.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParameterListSyntax.CloseParenthesisToken">
            <summary>The close parenthesis token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.TableFieldSyntax">
            <summary>The base class for table fields.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IdentifierKeyedTableFieldSyntax">
            <summary>Represents a table field whose key is an identifier.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IdentifierKeyedTableFieldSyntax.Identifier">
            <summary>The table field's key.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IdentifierKeyedTableFieldSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IdentifierKeyedTableFieldSyntax.Value">
            <summary>The table field's value.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionKeyedTableFieldSyntax">
            <summary>Represents a table field whose key is an expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionKeyedTableFieldSyntax.OpenBracketToken">
            <summary>The opening bracket token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionKeyedTableFieldSyntax.Key">
            <summary>The table field's key.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionKeyedTableFieldSyntax.CloseBracketToken">
            <summary>The closing bracket token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionKeyedTableFieldSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionKeyedTableFieldSyntax.Value">
            <summary>The field's value.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.UnkeyedTableFieldSyntax">
            <summary>Represents a table field without a key.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.UnkeyedTableFieldSyntax.Value">
            <summary>The table field's value.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionNameSyntax">
            <summary>The base class for function name nodes.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionNameSyntax.Name">
            <summary>The member name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SimpleFunctionNameSyntax">
            <summary>Represents a function name which is only an identifier.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.SimpleFunctionNameSyntax.Name">
            <summary>The function name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MemberFunctionNameSyntax">
            <summary>Represents a function name which is a member.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MemberFunctionNameSyntax.BaseName">
            <summary>The base function name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MemberFunctionNameSyntax.DotToken">
            <summary>The dot token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MemberFunctionNameSyntax.Name">
            <summary>The member name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodFunctionNameSyntax">
            <summary>Represents a method-style function name syntax.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodFunctionNameSyntax.BaseName">
            <summary>The base name for this method.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodFunctionNameSyntax.ColonToken">
            <summary>The colon token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodFunctionNameSyntax.Name">
            <summary>The method name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionArgumentSyntax">
            <summary>The base class for function arguments.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.StringFunctionArgumentSyntax">
            <summary>Represents a string being passed as a function call's argument.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.StringFunctionArgumentSyntax.Expression">
            <summary>The string literal being passed as an argument.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.TableConstructorFunctionArgumentSyntax">
            <summary>Represents a table being passed as a function call's arguments.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.TableConstructorFunctionArgumentSyntax.TableConstructor">
            <summary>The actual table constructor.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionListFunctionArgumentSyntax">
            <summary>Represents a list of expressions being passed as a function's arguments.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionListFunctionArgumentSyntax.OpenParenthesisToken">
            <summary>The argument list's opening parenthesis token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionListFunctionArgumentSyntax.Expressions">
            <summary>The list of expressions.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionListFunctionArgumentSyntax.CloseParenthesisToken">
            <summary>The argument list's closing parenthesis token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionSyntax">
            <summary>The base class for expressions.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AnonymousFunctionExpressionSyntax">
            <summary>Represents an anonymous function expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AnonymousFunctionExpressionSyntax.FunctionKeyword">
            <summary>The 'function' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AnonymousFunctionExpressionSyntax.Parameters">
            <summary>The list of parameters.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AnonymousFunctionExpressionSyntax.Body">
            <summary>The function's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AnonymousFunctionExpressionSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.TableConstructorExpressionSyntax">
            <summary>Represents a table constructor expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.TableConstructorExpressionSyntax.OpenBraceToken">
            <summary>The opening brace token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.TableConstructorExpressionSyntax.Fields">
            <summary>The list of fields.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.TableConstructorExpressionSyntax.CloseBraceToken">
            <summary>The closing brace token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LiteralExpressionSyntax">
            <summary>Represents a literal expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LiteralExpressionSyntax.Token">
            <summary>The literal token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.VarArgExpressionSyntax">
            <summary>Represents a vararg expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.VarArgExpressionSyntax.VarArgToken">
            <summary>The vararg token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.VariableExpressionSyntax">
            <summary>The base class for variable expressions (values that can be assigned to).</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MemberAccessExpressionSyntax.Expression">
            <summary>The expression that contains the member being accessed.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MemberAccessExpressionSyntax.DotSeparator">
            <summary>The dot separating the expression and the identifier.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MemberAccessExpressionSyntax.MemberName">
            <summary>The identifier representing the member name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElementAccessExpressionSyntax.Expression">
            <summary>The expression that contains the member being accessed.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElementAccessExpressionSyntax.OpenBracketToken">
            <summary>The opening bracket token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElementAccessExpressionSyntax.KeyExpression">
            <summary>The key expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElementAccessExpressionSyntax.CloseBracketToken">
            <summary>The closing bracket token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.UnaryExpressionSyntax">
            <summary>Represents an unary expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.UnaryExpressionSyntax.OperatorToken">
            <summary>The operator token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.UnaryExpressionSyntax.Operand">
            <summary>The operand expression.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.BinaryExpressionSyntax">
            <summary>Represents a binary expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.BinaryExpressionSyntax.Left">
            <summary>The expression on the left side of the operator.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.BinaryExpressionSyntax.OperatorToken">
            <summary>The operator token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.BinaryExpressionSyntax.Right">
            <summary>The expression on the right side of the operator.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfExpressionClauseSyntax">
            <summary>
            Represents an elseif clause in an if expression.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfExpressionClauseSyntax.ElseIfKeyword">
            <summary>The 'elseif' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfExpressionClauseSyntax.Condition">
            <summary>The elseif's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfExpressionClauseSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfExpressionClauseSyntax.Value">
            <summary>The value to be returned if the condition is true.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax">
            <summary>
            Represents Luau's if expression.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax.IfKeyword">
            <summary>The 'if' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax.Condition">
            <summary>The if's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax.TrueValue">
            <summary>The value that will be returned if condition is true.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax.ElseIfClauses">
            <summary>The elseif clauses.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax.ElseKeyword">
            <summary>The 'else' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfExpressionSyntax.FalseValue">
            <summary>The value that will be returned if none of the previous conditions are true.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.PrefixExpressionSyntax">
            <summary>
            The base node for prefix expressions (expressions that can be called as functions,
            have methods called on them and/or have members/elements accessed on them).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParenthesizedExpressionSyntax.OpenParenthesisToken">
            <summary>The opening parenthesis token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParenthesizedExpressionSyntax.Expression">
            <summary>The inner expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ParenthesizedExpressionSyntax.CloseParenthesisToken">
            <summary>The closing parenthesis token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionCallExpressionSyntax">
            <summary>Represents a function call expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionCallExpressionSyntax.Expression">
            <summary>The expression returning the function to be called.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionCallExpressionSyntax.Argument">
            <summary>The function's arguments.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodCallExpressionSyntax">
            <summary>Represents a method call (obj:method args...) expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodCallExpressionSyntax.Expression">
            <summary>The expression that contains the method being called.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodCallExpressionSyntax.ColonToken">
            <summary>The colon token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodCallExpressionSyntax.Identifier">
            <summary>The identifier containing the method name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.MethodCallExpressionSyntax.Argument">
            <summary>The method call's arguments.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.StatementSyntax">
            <summary>The base class for statements.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.StatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.EqualsValuesClauseSyntax">
            <summary>Represents the values being assigned to the names in an assignment or variable declaration.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.EqualsValuesClauseSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.EqualsValuesClauseSyntax.Values">
            <summary>The list of values being assigned.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AssignmentStatementSyntax">
            <summary>Represents an assignment statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AssignmentStatementSyntax.Variables">
            <summary>The variables being assigned to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AssignmentStatementSyntax.EqualsValues">
            <summary>The values being assigned to the names (if any).</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.AssignmentStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.CompoundAssignmentStatementSyntax.Variable">
            <summary>The variable being assigned to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.CompoundAssignmentStatementSyntax.AssignmentOperatorToken">
            <summary>The compound assignment operator token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.CompoundAssignmentStatementSyntax.Expression">
            <summary>The expression on the right side of the operator.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.CompoundAssignmentStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalVariableDeclarationStatementSyntax">
            <summary>Represents a local variable declaration statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalVariableDeclarationStatementSyntax.LocalKeyword">
            <summary>The 'local' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalVariableDeclarationStatementSyntax.Names">
            <summary>The list of names being assigned to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalVariableDeclarationStatementSyntax.EqualsValues">
            <summary>The values being assigned to the names (if any).</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalVariableDeclarationStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax">
            <summary>Represents a numeric for statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.ForKeyword">
            <summary>The 'for' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.Identifier">
            <summary>The loop variable identifier.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.InitialValue">
            <summary>The expression defining the initial value of the loop variable.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.FinalValueCommaToken">
            <summary>The comma separating the initial value from the final value.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.FinalValue">
            <summary>The expression defining the final value of the loop variable.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.StepValueCommaToken">
            <summary>
            The comma separating the final value from the step value.
            May be None if there is no step.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.StepValue">
            <summary>
            The expression defining the step value of the loop variable.
            May be None if there is no step.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.Body">
            <summary>The loop's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.NumericForStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax">
            <summary>Represents a generic for loop statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.ForKeyword">
            <summary>The 'for' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.Identifiers">
            <summary>The list of loop variables.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.InKeyword">
            <summary>The 'in' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.Expressions">
            <summary>The list of expressions.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.Body">
            <summary>The loop's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GenericForStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.WhileStatementSyntax">
            <summary>Represents a while statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.WhileStatementSyntax.WhileKeyword">
            <summary>The 'while' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.WhileStatementSyntax.Condition">
            <summary>The while's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.WhileStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.WhileStatementSyntax.Body">
            <summary>The while's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.WhileStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.WhileStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.RepeatUntilStatementSyntax.RepeatKeyword">
            <summary>The 'repeat' until keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.RepeatUntilStatementSyntax.Body">
            <summary>The repeat until's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.RepeatUntilStatementSyntax.UntilKeyword">
            <summary>The 'until' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.RepeatUntilStatementSyntax.Condition">
            <summary>The repeat until's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.RepeatUntilStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax">
            <summary>Represents an if statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.IfKeyword">
            <summary>The 'if' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.Condition">
            <summary>The if's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.Body">
            <summary>The if's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.ElseIfClauses">
            <summary>The elseif clauses.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.ElseClause">
            <summary>The else clause.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.IfStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfClauseSyntax">
            <summary>Represents an elseif clause.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfClauseSyntax.ElseIfKeyword">
            <summary>The 'elseif' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfClauseSyntax.Condition">
            <summary>The condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfClauseSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseIfClauseSyntax.Body">
            <summary>The elseif body.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseClauseSyntax">
            <summary>Represents an else clause.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseClauseSyntax.ElseKeyword">
            <summary>The 'else' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ElseClauseSyntax.ElseBody">
            <summary>The else's body.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoStatementSyntax">
            <summary>Represents a goto statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoStatementSyntax.GotoKeyword">
            <summary>The 'goto' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoStatementSyntax.LabelName">
            <summary>The name of the label being jumped to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.BreakStatementSyntax">
            <summary>Represents a break statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.BreakStatementSyntax.BreakKeyword">
            <summary>The 'break' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.BreakStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ReturnStatementSyntax">
            <summary>Represents a return statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ReturnStatementSyntax.ReturnKeyword">
            <summary>The 'return' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ReturnStatementSyntax.Expressions">
            <summary>The expressions being returned.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ReturnStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ContinueStatementSyntax">
            <summary>Represents a continue statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ContinueStatementSyntax.ContinueKeyword">
            <summary>The 'continue' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ContinueStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax">
            <summary>Represents a local function declaration statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax.LocalKeyword">
            <summary>The 'local' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax.FunctionKeyword">
            <summary>The 'function' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax.Name">
            <summary>The function's name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax.Parameters">
            <summary>The parameter list.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax.Body">
            <summary>The function's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.LocalFunctionDeclarationStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionDeclarationStatementSyntax">
            <summary>Represents a function declaration statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionDeclarationStatementSyntax.FunctionKeyword">
            <summary>The 'function' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionDeclarationStatementSyntax.Name">
            <summary>The function's name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionDeclarationStatementSyntax.Parameters">
            <summary>The function's parameters.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionDeclarationStatementSyntax.Body">
            <summary>The function's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionDeclarationStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.FunctionDeclarationStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.DoStatementSyntax">
            <summary>Represents a do statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.DoStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.DoStatementSyntax.Body">
            <summary>The do's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.DoStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.DoStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoLabelStatementSyntax">
            <summary>Represents a goto label statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoLabelStatementSyntax.LeftDelimiterToken">
            <summary>The delimiter on the left of the name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoLabelStatementSyntax.Identifier">
            <summary>The label name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoLabelStatementSyntax.RightDelimiterToken">
            <summary>The delimiter on the right of the name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.GotoLabelStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionStatementSyntax">
            <summary>An expression as a statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionStatementSyntax.Expression">
            <summary>The function call expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.ExpressionStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.EmptyStatementSyntax">
            <summary>An empty statement.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.EmptyStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.CompilationUnitSyntax">
            <summary>The node containing all of the file's contents.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.CompilationUnitSyntax.Statements">
            <summary>The statements in the compilation unit.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.InternalSyntax.CompilationUnitSyntax.EndOfFileToken">
            <summary>The end-of-file token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax">
            <summary>A name expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.IdentifierName"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax.Name">
            <summary>
            This identifier's name.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax.Identifier">
            <summary>The identifier.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax">
            <summary>Represents a named function parameter.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.NamedParameter"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax.Name">
            <summary>
            This parameter's name.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax.Identifier">
            <summary>The name of the parameter.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.StructuredTriviaSyntax">
            <summary>
            It's a non terminal Trivia CSharpSyntaxNode that has a tree underneath it.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.StructuredTriviaSyntax.ParentTrivia">
            <summary>
            Get parent trivia.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.SyntaxNodeRemover.SyntaxRemover.IsEndOfLine(Loretta.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Returns whether the specified <see cref="T:Loretta.CodeAnalysis.SyntaxTrivia"/> token is also the end of the line.  This will
            be true for <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EndOfLineTrivia"/>, <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SingleLineCommentTrivia"/>,
            and all preprocessor directives.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.SyntaxNodeRemover.SyntaxRemover.GetEndOfLine(Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Returns the first end of line found in a <see cref="T:Loretta.CodeAnalysis.SyntaxTriviaList"/>.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Syntax.SyntaxNormalizer.GetIndentation(System.Int32)">
            <summary>
            Obtains the indentaion for the provided depth.
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.SkippedTokensTriviaSyntax">
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SkippedTokensTrivia"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax">
            <summary>Represents a block of code.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.StatementList"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax.Statements">
            <summary>The list of statements contained within this block.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ParameterSyntax">
            <summary>The base type for parameter nodes.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax">
            <summary>Represents a vararg function parameter.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.VarArgParameter"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax.VarArgToken">
            <summary>The vararg token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax">
            <summary>Represents a function declaration's parameter list.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ParameterList"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax.OpenParenthesisToken">
            <summary>The parameter list opening parenthesis.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax.Parameters">
            <summary>The parameter list opening parenthesis.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax.CloseParenthesisToken">
            <summary>The close parenthesis token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.TableFieldSyntax">
            <summary>The base class for table fields.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax">
            <summary>Represents a table field whose key is an identifier.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.IdentifierKeyedTableField"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax.Identifier">
            <summary>The table field's key.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax.Value">
            <summary>The table field's value.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax">
            <summary>Represents a table field whose key is an expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ExpressionKeyedTableField"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax.OpenBracketToken">
            <summary>The opening bracket token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax.Key">
            <summary>The table field's key.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax.CloseBracketToken">
            <summary>The closing bracket token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax.Value">
            <summary>The field's value.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax">
            <summary>Represents a table field without a key.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.UnkeyedTableField"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax.Value">
            <summary>The table field's value.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax">
            <summary>The base class for function name nodes.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax.Name">
            <summary>The member name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax">
            <summary>Represents a function name which is only an identifier.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SimpleFunctionName"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax.Name">
            <summary>The function name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax">
            <summary>Represents a function name which is a member.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MemberFunctionName"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax.BaseName">
            <summary>The base function name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax.DotToken">
            <summary>The dot token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax.Name">
            <summary>The member name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax">
            <summary>Represents a method-style function name syntax.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MethodFunctionName"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax.BaseName">
            <summary>The base name for this method.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax.ColonToken">
            <summary>The colon token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax.Name">
            <summary>The method name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.FunctionArgumentSyntax">
            <summary>The base class for function arguments.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax">
            <summary>Represents a string being passed as a function call's argument.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.StringFunctionArgument"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax.Expression">
            <summary>The string literal being passed as an argument.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax">
            <summary>Represents a table being passed as a function call's arguments.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.TableConstructorFunctionArgument"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax.TableConstructor">
            <summary>The actual table constructor.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax">
            <summary>Represents a list of expressions being passed as a function's arguments.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ExpressionListFunctionArgument"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax.OpenParenthesisToken">
            <summary>The argument list's opening parenthesis token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax.Expressions">
            <summary>The list of expressions.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax.CloseParenthesisToken">
            <summary>The argument list's closing parenthesis token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax">
            <summary>The base class for expressions.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax">
            <summary>Represents an anonymous function expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.AnonymousFunctionExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax.FunctionKeyword">
            <summary>The 'function' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax.Parameters">
            <summary>The list of parameters.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax.Body">
            <summary>The function's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax">
            <summary>Represents a table constructor expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.TableConstructorExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax.OpenBraceToken">
            <summary>The opening brace token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax.Fields">
            <summary>The list of fields.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax.CloseBraceToken">
            <summary>The closing brace token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax">
            <summary>Represents a literal expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.NumericalLiteralExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.StringLiteralExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.TrueLiteralExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.FalseLiteralExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.NilLiteralExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.HashStringLiteralExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax.Token">
            <summary>The literal token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax">
            <summary>Represents a vararg expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.VarArgExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax.VarArgToken">
            <summary>The vararg token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.VariableExpressionSyntax">
            <summary>The base class for variable expressions (values that can be assigned to).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax">
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MemberAccessExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax.Expression">
            <summary>The expression that contains the member being accessed.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax.DotSeparator">
            <summary>The dot separating the expression and the identifier.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax.MemberName">
            <summary>The identifier representing the member name.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax">
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ElementAccessExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax.Expression">
            <summary>The expression that contains the member being accessed.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax.OpenBracketToken">
            <summary>The opening bracket token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax.KeyExpression">
            <summary>The key expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax.CloseBracketToken">
            <summary>The closing bracket token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax">
            <summary>Represents an unary expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.BitwiseNotExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LengthExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LogicalNotExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.UnaryMinusExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax.OperatorToken">
            <summary>The operator token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax.Operand">
            <summary>The operand expression.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax">
            <summary>Represents a binary expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.AddExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.BitwiseAndExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.BitwiseOrExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ConcatExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DivideExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EqualsExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ExclusiveOrExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ExponentiateExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GreaterThanExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GreaterThanOrEqualExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LeftShiftExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LessThanExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LessThanOrEqualExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LogicalAndExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LogicalOrExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ModuloExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MultiplyExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.NotEqualsExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.RightShiftExpression"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SubtractExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax.Left">
            <summary>The expression on the left side of the operator.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax.OperatorToken">
            <summary>The operator token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax.Right">
            <summary>The expression on the right side of the operator.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax">
            <summary>
            Represents an elseif clause in an if expression.
            </summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ElseIfExpressionClause"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax.ElseIfKeyword">
            <summary>The 'elseif' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax.Condition">
            <summary>The elseif's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax.Value">
            <summary>The value to be returned if the condition is true.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax">
            <summary>
            Represents Luau's if expression.
            </summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.IfExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.IfKeyword">
            <summary>The 'if' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.Condition">
            <summary>The if's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.TrueValue">
            <summary>The value that will be returned if condition is true.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.ElseIfClauses">
            <summary>The elseif clauses.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.ElseKeyword">
            <summary>The 'else' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax.FalseValue">
            <summary>The value that will be returned if none of the previous conditions are true.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax">
            <summary>
            The base node for prefix expressions (expressions that can be called as functions,
            have methods called on them and/or have members/elements accessed on them).
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax">
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ParenthesizedExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax.OpenParenthesisToken">
            <summary>The opening parenthesis token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax.Expression">
            <summary>The inner expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax.CloseParenthesisToken">
            <summary>The closing parenthesis token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax">
            <summary>Represents a function call expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.FunctionCallExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax.Expression">
            <summary>The expression returning the function to be called.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax.Argument">
            <summary>The function's arguments.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax">
            <summary>Represents a method call (obj:method args...) expression.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MethodCallExpression"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax.Expression">
            <summary>The expression that contains the method being called.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax.ColonToken">
            <summary>The colon token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax.Identifier">
            <summary>The identifier containing the method name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax.Argument">
            <summary>The method call's arguments.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.StatementSyntax">
            <summary>The base class for statements.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.StatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax">
            <summary>Represents the values being assigned to the names in an assignment or variable declaration.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EqualsValuesClause"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax.Values">
            <summary>The list of values being assigned.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax">
            <summary>Represents an assignment statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.AssignmentStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax.Variables">
            <summary>The variables being assigned to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax.EqualsValues">
            <summary>The values being assigned to the names (if any).</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax">
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.AddAssignmentStatement"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SubtractAssignmentStatement"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MultiplyAssignmentStatement"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DivideAssignmentStatement"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ModuloAssignmentStatement"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ConcatAssignmentStatement"/></description></item>
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ExponentiateAssignmentStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax.Variable">
            <summary>The variable being assigned to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax.AssignmentOperatorToken">
            <summary>The compound assignment operator token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax.Expression">
            <summary>The expression on the right side of the operator.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax">
            <summary>Represents a local variable declaration statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LocalVariableDeclarationStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.LocalKeyword">
            <summary>The 'local' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.Names">
            <summary>The list of names being assigned to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.EqualsValues">
            <summary>The values being assigned to the names (if any).</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax">
            <summary>Represents a numeric for statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.NumericForStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.ForKeyword">
            <summary>The 'for' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.Identifier">
            <summary>The loop variable identifier.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.EqualsToken">
            <summary>The equals token.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.InitialValue">
            <summary>The expression defining the initial value of the loop variable.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.FinalValueCommaToken">
            <summary>The comma separating the initial value from the final value.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.FinalValue">
            <summary>The expression defining the final value of the loop variable.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.StepValueCommaToken">
            <summary>
            The comma separating the final value from the step value.
            May be None if there is no step.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.StepValue">
            <summary>
            The expression defining the step value of the loop variable.
            May be None if there is no step.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.Body">
            <summary>The loop's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax">
            <summary>Represents a generic for loop statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GenericForStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.ForKeyword">
            <summary>The 'for' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.Identifiers">
            <summary>The list of loop variables.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.InKeyword">
            <summary>The 'in' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.Expressions">
            <summary>The list of expressions.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.Body">
            <summary>The loop's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax">
            <summary>Represents a while statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.WhileStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.WhileKeyword">
            <summary>The 'while' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.Condition">
            <summary>The while's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.Body">
            <summary>The while's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax">
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.RepeatUntilStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax.RepeatKeyword">
            <summary>The 'repeat' until keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax.Body">
            <summary>The repeat until's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax.UntilKeyword">
            <summary>The 'until' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax.Condition">
            <summary>The repeat until's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax">
            <summary>Represents an if statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.IfStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.IfKeyword">
            <summary>The 'if' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.Condition">
            <summary>The if's condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.Body">
            <summary>The if's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.ElseIfClauses">
            <summary>The elseif clauses.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.ElseClause">
            <summary>The else clause.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax">
            <summary>Represents an elseif clause.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ElseIfClause"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax.ElseIfKeyword">
            <summary>The 'elseif' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax.Condition">
            <summary>The condition.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax.ThenKeyword">
            <summary>The 'then' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax.Body">
            <summary>The elseif body.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax">
            <summary>Represents an else clause.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ElseClause"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax.ElseKeyword">
            <summary>The 'else' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax.ElseBody">
            <summary>The else's body.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax">
            <summary>Represents a goto statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GotoStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax.GotoKeyword">
            <summary>The 'goto' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax.LabelName">
            <summary>The name of the label being jumped to.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax">
            <summary>Represents a break statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.BreakStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax.BreakKeyword">
            <summary>The 'break' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax">
            <summary>Represents a return statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ReturnStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax.ReturnKeyword">
            <summary>The 'return' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax.Expressions">
            <summary>The expressions being returned.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax">
            <summary>Represents a continue statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ContinueStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax.ContinueKeyword">
            <summary>The 'continue' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax">
            <summary>Represents a local function declaration statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LocalFunctionDeclarationStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.LocalKeyword">
            <summary>The 'local' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.FunctionKeyword">
            <summary>The 'function' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.Name">
            <summary>The function's name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.Parameters">
            <summary>The parameter list.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.Body">
            <summary>The function's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax">
            <summary>Represents a function declaration statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.FunctionDeclarationStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.FunctionKeyword">
            <summary>The 'function' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.Name">
            <summary>The function's name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.Parameters">
            <summary>The function's parameters.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.Body">
            <summary>The function's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax">
            <summary>Represents a do statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DoStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax.DoKeyword">
            <summary>The 'do' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax.Body">
            <summary>The do's body.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax.EndKeyword">
            <summary>The 'end' keyword.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax">
            <summary>Represents a goto label statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GotoLabelStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax.LeftDelimiterToken">
            <summary>The delimiter on the left of the name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax.Identifier">
            <summary>The label name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax.RightDelimiterToken">
            <summary>The delimiter on the right of the name.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax">
            <summary>An expression as a statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ExpressionStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax.Expression">
            <summary>The function call expression.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax">
            <summary>An empty statement.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EmptyStatement"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax.SemicolonToken">
            <summary>The semicolon at the end of the statement (if any).</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax">
            <summary>The node containing all of the file's contents.</summary>
            <remarks>
            <para>This node is associated with the following syntax kinds:</para>
            <list type="bullet">
            <item><description><see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.CompilationUnit"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax.Statements">
            <summary>The statements in the compilation unit.</summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax.EndOfFileToken">
            <summary>The end-of-file token.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.IFileScope">
            <summary>
            A file's scope.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IFileScope.ArgVariable">
            <summary>
            The implicit <c>arg</c> that's available in all files.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IFileScope.VarArgParameter">
            <summary>
            The implicit vararg that's available in all files
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.IFunctionScope">
            <summary>
            A function's scope.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IFunctionScope.Parameters">
            <summary>
            The parameters
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IFunctionScope.CapturedVariables">
            <summary>
            Contains the variables that are captured by this scope.
            Variables captured by the scope are variables that weren't declared
            on the scope but are used in it.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.IGotoLabel">
            <summary>
            The interface for a goto label.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IGotoLabel.Name">
            <summary>
            The label's name.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IGotoLabel.LabelSyntax">
            <summary>
            The label's location.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IGotoLabel.JumpSyntaxes">
            <summary>
            The nodes that jump to this label.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.IScope">
            <summary>
            The base interface for scopes.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.Kind">
            <summary>
            The kind of scope.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.Node">
            <summary>
            The syntax node that originated this scope.
            Not supported for the global scope.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.ContainingScope">
            <summary>
            The parent scope (if any).
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.DeclaredVariables">
            <summary>
            Contains the variables declared within the scope.
            As variables can be shadowed/redeclared, there may be multiple
            variables with the same name.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.ReferencedVariables">
            <summary>
            Variables that are directly referenced by this scope.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.GotoLabels">
            <summary>
            The goto labels contained within this scope.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.ContainedScopes">
            <summary>
            Returns the scopes directly contained within this scope.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.IScope.FindVariable(System.String,Loretta.CodeAnalysis.Lua.ScopeKind)">
            <summary>
            Attempts to find a variable with the given name.
            </summary>
            <param name="name">The name of the variable to search by.</param>
            <param name="kind">
            The kind of scope up to which to search the variable in.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the providedd name is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the provided name is not a valid identifier.
            </exception>
            <remarks>
              <para>The kind parameter searches for a scope of the provided kind or a more specific one as in the following list:</para>
              <list type="bullet">
                <item>
                  <description>
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block"/> searches only <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block"/>s.
                  </description>
                </item>
                <item>
                  <description>
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function"/> searches: <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function"/>s
                    and <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block"/>s.
                  </description>
                </item>
                <item>
                  <description>
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.File"/> searches: <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.File"/>,
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function"/>s and <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block"/>s.
                  </description>
                </item>
                <item>
                  <description>
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Global"/> searches: <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Global"/>,
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.File"/>, <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function"/>s
                    and <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block"/>s.
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IScope.Parent">
            <summary>
            Deprecated. <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.IScope.ContainingScope"/>
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.IVariable">
            <summary>
            The base interface for variables
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.Kind">
            <summary>
            The kind of this variable.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.ContainingScope">
            <summary>
            The containing scope.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.Name">
            <summary>
            The variable's name.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.Declaration">
            <summary>
            The node where this variable is declared.
            </summary>
            <remarks>
            <see langword="null"/> if it is a global or implicit variable.
            </remarks>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.ReferencingScopes">
            <summary>
            The scopes that reference this variable.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.CapturingScopes">
            <summary>
            All scopes that capture this variable as an upvalue.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.ReadLocations">
            <summary>
            All locations this variable is read from.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.IVariable.WriteLocations">
            <summary>
            All locations this variable is written to.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.IVariable.CanBeAccessedIn(Loretta.CodeAnalysis.Lua.IScope)">
            <summary>
            Returns whether this variable can be accessed in the
            provided scope.
            </summary>
            <param name="scope">The scope to check access in.</param>
            <returns></returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.ScopeKind">
            <summary>
            The type of scope.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.ScopeKind.Global">
            <summary>
            The global scope.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.ScopeKind.File">
            <summary>
            A file's scope.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function">
            <summary>
            A local function's scope.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block">
            <summary>
            A block's scope.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.VariableKind">
            <summary>
            The kind of varibles available.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.VariableKind.Local">
            <summary>
            A local variable.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.VariableKind.Global">
            <summary>
            A global variable.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.VariableKind.Parameter">
            <summary>
            A function parameter.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.VariableKind.Iteration">
            <summary>
            A loop iteration variable.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.RenameError">
            <summary>
            An error found while renaming a variable.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.IdentifierNameNotSupportedError">
            <summary>
            An error that represents the provided identifier not being supported
            in a provided tree.
            </summary>
            <param name="TreeWithoutSupport">
            The <see cref="T:Loretta.CodeAnalysis.SyntaxTree"/> the identifier name is not supported on.
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.IdentifierNameNotSupportedError.#ctor(Loretta.CodeAnalysis.SyntaxTree)">
            <summary>
            An error that represents the provided identifier not being supported
            in a provided tree.
            </summary>
            <param name="TreeWithoutSupport">
            The <see cref="T:Loretta.CodeAnalysis.SyntaxTree"/> the identifier name is not supported on.
            </param>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.VariableConflictError">
            <summary>
            Represents a conflict with an existing variable.
            </summary>
            <param name="VariableBeingConflictedWith">The variable that is conflicted with.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.VariableConflictError.#ctor(Loretta.CodeAnalysis.Lua.IVariable)">
            <summary>
            Represents a conflict with an existing variable.
            </summary>
            <param name="VariableBeingConflictedWith">The variable that is conflicted with.</param>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Script">
            <summary>
            A script containing one or more files.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Script.Empty">
            <summary>
            An empty script with no syntax trees.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Script.#ctor">
            <summary>
            Initializes an empty script.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Script.#ctor(System.Collections.Immutable.ImmutableArray{Loretta.CodeAnalysis.SyntaxTree})">
            <summary>
            Initializes a new script.
            </summary>
            <param name="syntaxTrees"></param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="syntaxTrees"/> is a default array.
            </exception>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Script.SyntaxTrees">
            <summary>
            The syntax trees contained in this script.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.Script.RootScope">
            <summary>
            The root scope of the script.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Script.GetScope(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Get the scope for the provided node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Script.FindScope(Loretta.CodeAnalysis.SyntaxNode,Loretta.CodeAnalysis.Lua.ScopeKind)">
            <summary>
            Attempts to find the outermost scope of the provided kind (or a more generic one).
            </summary>
            <param name="node">The node to search from.</param>
            <param name="kind">The kind to search for.</param>
            <returns></returns>
            <remarks>
              <para>
                If the tree that contains the provided node does not have a <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax"/>, statements on the file
                root <b>will not have a scope</b>.
              </para>
              <para>The kind parameter searches for a scope of the provided kind or a more generic one as in the following list:</para>
              <list type="bullet">
                <item>
                  <description>
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block"/> searches for: <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Block"/>,
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function"/>, <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.File"/>, <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Global"/>.
                  </description>
                </item>
                <item>
                  <description>
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function"/> searches for: <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Function"/>,
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.File"/>, <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Global"/>.
                  </description>
                </item>
                <item>
                  <description>
                    <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.File"/> searches for: <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.File"/>, <see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Global"/>.
                  </description>
                </item>
                <item>
                  <description><see cref="F:Loretta.CodeAnalysis.Lua.ScopeKind.Global"/> searches for itself.</description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Script.GetVariable(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Get the variable for the provided node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Script.GetLabel(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Get the goto label for the provided node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Script.RenameVariable(Loretta.CodeAnalysis.Lua.IVariable,System.String)">
            <summary>
            Attempts to rename the provided variable with the new provided name.
            </summary>
            <param name="variable">The variable to rename.</param>
            <param name="newName">The new variable's name.</param>
            <returns>
            An Ok(Script) if the rename was successful or
            an Err(IEnumerable&lt;RenameError&gt;) if there were errors
            while renaming the variable.
            </returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay">
            <summary>
            Displays an object in the Lua style.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.NilLiteral">
            <summary>
            The nil literal in Lua.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.NullLiteral">
            <inheritdoc cref="P:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.NilLiteral"/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.FormatPrimitive(System.Object,Loretta.CodeAnalysis.ObjectDisplayOptions)">
            <summary>
            Returns a string representation of an object of primitive type.
            </summary>
            <param name="obj">A value to display as a string.</param>
            <param name="options">Options used to customize formatting of an object value.</param>
            <returns>A string representation of an object of primitive type (or null if the type is not supported).</returns>
            <remarks>
            Handles <see cref="T:System.Boolean"/>, <see cref="T:System.String"/>, <see cref="T:System.Double"/> and <c>null</c>.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.FormatLiteral(System.Boolean)">
            <summary>
            Returns a string representation of a boolean.
            </summary>
            <param name="value">A value to display as a string.</param>
            <returns>A string representation of an object of primitive type.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.TryReplaceChar(System.Char,System.String@,System.Boolean)">
            <summary>
            Returns true if the character should be replaced and sets
            <paramref name="replaceWith"/> to the replacement text.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.FormatLiteral(System.String,Loretta.CodeAnalysis.ObjectDisplayOptions)">
            <summary>
            Returns a Lua string literal with the given value.
            </summary>
            <param name="value">The value that the resulting string literal should have.</param>
            <param name="options">Options used to customize formatting of an object value.</param>
            <returns>A string literal with the given value.</returns>
            <remarks>
            Optionally escapes non-printable characters.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SymbolDisplay.ObjectDisplay.FormatLiteral(System.Double,Loretta.CodeAnalysis.ObjectDisplayOptions,System.Globalization.CultureInfo)">
            <summary>
            Returns a Lua number literal with the given value.
            </summary>
            <param name="value"></param>
            <param name="options"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode">
            <summary>
            Represents a non-terminal node in the syntax tree.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.#ctor(Loretta.CodeAnalysis.GreenNode,System.Int32,Loretta.CodeAnalysis.SyntaxTree)">
            <summary>
            Used by structured trivia which has "parent == null", and therefore must know its
            SyntaxTree explicitly when created.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.SyntaxTree">
            <summary>
            Returns a non-null <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.SyntaxTree"/> that owns this node.
            If this node was created with an explicit non-null <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.SyntaxTree"/>, returns that tree.
            Otherwise, if this node has a non-null parent, then returns the parent's <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.SyntaxTree"/>.
            Otherwise, returns a newly created <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.SyntaxTree"/> rooted at this node, preserving this node's reference identity.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept``1(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor{``0})">
            <summary>
            Accepts a visitor into this node.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Accept(Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor)">
            <summary>
            Accepts a visitor into this node.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Parent">
            <summary>
            The node that contains this node in its Children collection.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Kind">
            <summary>
            Returns the <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> of the node.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.Language">
            <summary>
            The language name that this node is syntax of.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetLeadingTrivia">
            <summary>
            The list of trivia that appears before this node in the source code.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetTrailingTrivia">
            <summary>
            The list of trivia that appears after this node in the source code.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.DeserializeFrom(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserialize a syntax node from the byte stream.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetLocation">
            <summary>
            Gets a <see cref="T:Loretta.CodeAnalysis.Location"/> for this node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetReference">
            <summary>
            Gets a SyntaxReference for this syntax node. SyntaxReferences can be used to
            regain access to a syntax node without keeping the entire tree and source text in
            memory.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetDiagnostics">
            <summary>
            Gets a list of all the diagnostics in the sub tree that has this node as its root.
            This method does not filter diagnostics based on #pragmas and compiler options
            like nowarn, warnaserror etc.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the first token of the tree rooted by this node.
            </summary>
            <param name="includeZeroWidth">True if zero width tokens should be included, false by
            default.</param>
            <param name="includeSkipped">True if skipped tokens should be included, false by default.</param>
            <param name="includeDirectives">True if directives should be included, false by default.</param>
            <param name="includeDocumentationComments">True if documentation comments should be
            included, false by default.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetFirstToken(System.Func{Loretta.CodeAnalysis.SyntaxToken,System.Boolean},System.Func{Loretta.CodeAnalysis.SyntaxTrivia,System.Boolean})">
            <summary>
            Gets the first token of the tree rooted by this node.
            </summary>
            <param name="predicate">Only tokens for which this predicate returns true are included.  Pass null to include
            all tokens.</param>
            <param name="stepInto">Steps into trivia if this is not null.  Only trivia for which this delegate returns
            true are included.</param> 
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the last non-zero-width token of the tree rooted by this node.
            </summary>
            <param name="includeZeroWidth">True if zero width tokens should be included, false by
            default.</param>
            <param name="includeSkipped">True if skipped tokens should be included, false by default.</param>
            <param name="includeDirectives">True if directives should be included, false by default.</param>
            <param name="includeDocumentationComments">True if documentation comments should be
            included, false by default.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.FindToken(System.Int32,System.Boolean)">
            <summary>
            Finds a token according to the following rules:
            1) If position matches the End of the node/s FullSpan and the node is CompilationUnit,
               then EoF is returned. 
            
             2) If node.FullSpan.Contains(position) then the token that contains given position is
                returned.
            
             3) Otherwise an ArgumentOutOfRangeException is thrown
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.FindTrivia(System.Int32,System.Func{Loretta.CodeAnalysis.SyntaxTrivia,System.Boolean})">
            <summary>
            Finds a descendant trivia of this node at the specified position, where the position is
            within the span of the node.
            </summary>
            <param name="position">The character position of the trivia relative to the beginning of
            the file.</param>
            <param name="stepInto">Specifies a function that determines per trivia node, whether to
            descend into structured trivia of that node.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.FindTrivia(System.Int32,System.Boolean)">
            <summary>
            Finds a descendant trivia of this node whose span includes the supplied position.
            </summary>
            <param name="position">The character position of the trivia relative to the beginning of
            the file.</param>
            <param name="findInsideTrivia">Whether to search inside structured trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.EquivalentToCore(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Determine if this node is structurally equivalent to another.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.SyntaxTreeCore">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.ReplaceCore``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,Loretta.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxToken},System.Func{Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxTrivia},System.Func{Loretta.CodeAnalysis.SyntaxTrivia,Loretta.CodeAnalysis.SyntaxTrivia,Loretta.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Replaces child nodes.
            </summary>
            <typeparam name="TNode"></typeparam>
            <param name="nodes"></param>
            <param name="computeReplacementNode"></param>
            <param name="tokens"></param>
            <param name="computeReplacementToken"></param>
            <param name="trivia"></param>
            <param name="computeReplacementTrivia"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.ReplaceNodeInListCore(Loretta.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxNode})">
            <summary>
            Replaces a node in a list.
            </summary>
            <param name="originalNode"></param>
            <param name="replacementNodes"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.InsertNodesInListCore(Loretta.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxNode},System.Boolean)">
            <summary>
            Inserts a node into a list.
            </summary>
            <param name="nodeInList"></param>
            <param name="nodesToInsert"></param>
            <param name="insertBefore"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.ReplaceTokenInListCore(Loretta.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxToken})">
            <summary>
            Replaces a token in a list.
            </summary>
            <param name="originalToken"></param>
            <param name="newTokens"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.InsertTokensInListCore(Loretta.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxToken},System.Boolean)">
            <summary>
            Inserts a token into a list.
            </summary>
            <param name="originalToken"></param>
            <param name="newTokens"></param>
            <param name="insertBefore"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.ReplaceTriviaInListCore(Loretta.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Replaces a trivia in a list.
            </summary>
            <param name="originalTrivia"></param>
            <param name="newTrivia"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.InsertTriviaInListCore(Loretta.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxTrivia},System.Boolean)">
            <summary>
            Inserts a trivia into a list.
            </summary>
            <param name="originalTrivia"></param>
            <param name="newTrivia"></param>
            <param name="insertBefore"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.RemoveNodesCore(System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxNode},Loretta.CodeAnalysis.SyntaxRemoveOptions)">
            <summary>
            Removes child nodes.
            </summary>
            <param name="nodes"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.NormalizeWhitespaceCore(System.String,System.String,System.Boolean)">
            <summary>
            Normalizes the whitespace in the node.
            </summary>
            <param name="indentation"></param>
            <param name="eol"></param>
            <param name="elasticTrivia"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.IsEquivalentToCore(Loretta.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Checks whether this node is equivalent to another.
            </summary>
            <param name="node"></param>
            <param name="topLevel"></param>
            <returns></returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter">
            <summary>
            Represents a <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1"/> which descends an entire <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> graph and
            may replace or remove visited SyntaxNodes in depth-first order.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter"/>
            </summary>
            <param name="visitIntoStructuredTrivia">Whether the rewriter should enter into structured trivia.</param>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxRewriter.VisitIntoStructuredTrivia">
            <summary>
            Whether the rewriter enters into structured trivia.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaSyntaxTree">
            <summary>
            The parsed representation of a Lua source document.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.Options">
            <summary>
            The options used by the parser to produce the syntax tree.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.CloneNodeAsRoot``1(``0)">
             <summary>
             Produces a clone of a <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> which will have current syntax tree as its parent.
            
             Caller must guarantee that if the same instance of <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> makes multiple calls
             to this function, only one result is observable.
             </summary>
             <typeparam name="T">Type of the syntax node.</typeparam>
             <param name="node">The original syntax node.</param>
             <returns>A clone of the original syntax node that has current <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxTree"/> as its parent.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetRoot(System.Threading.CancellationToken)">
            <summary>
            Gets the root node of the syntax tree.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.TryGetRoot(Loretta.CodeAnalysis.Lua.LuaSyntaxNode@)">
            <summary>
            Gets the root node of the syntax tree if it is already available.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetRootAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the root node of the syntax tree asynchronously.
            </summary>
            <remarks>
            By default, the work associated with this method will be executed immediately on the current thread.
            Implementations that wish to schedule this work differently should override <see cref="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetRootAsync(System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetCompilationUnitRoot(System.Threading.CancellationToken)">
            <summary>
            Gets the root of the syntax tree statically typed as <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax"/>.
            </summary>
            <remarks>
            Ensure that <see cref="P:Loretta.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot"/> is true for this tree prior to invoking this method.
            </remarks>
            <exception cref="T:System.InvalidCastException">Throws this exception if <see cref="P:Loretta.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot"/> is false.</exception>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.IsEquivalentTo(Loretta.CodeAnalysis.SyntaxTree,System.Boolean)">
            <summary>
            Determines if two trees are the same, disregarding trivia differences.
            </summary>
            <param name="tree">The tree to compare against.</param>
            <param name="topLevel">
            If true then the trees are equivalent if the contained nodes and tokens declaring metadata visible symbolic information are equivalent,
            ignoring any differences of nodes inside method bodies or initializer expressions, otherwise all nodes and tokens must be equivalent.
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.Create(Loretta.CodeAnalysis.Lua.LuaSyntaxNode,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Text.Encoding)">
            <summary>
            Creates a new syntax tree from a syntax node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.CreateForDebugger(Loretta.CodeAnalysis.Lua.LuaSyntaxNode,Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Creates a new syntax tree from a syntax node with text that should correspond to the syntax node.
            </summary>
            <remarks>This is used by the ExpressionEvaluator.</remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.CreateWithoutClone(Loretta.CodeAnalysis.Lua.LuaSyntaxNode)">
            <summary>
            <para>
            Internal helper for <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> class to create a new syntax tree rooted at the given root node.
            This method does not create a clone of the given root, but instead preserves it's reference identity.
            </para>
            <para>NOTE: This method is only intended to be used from <see cref="P:Loretta.CodeAnalysis.Lua.LuaSyntaxNode.SyntaxTree"/> property.</para>
            <para>NOTE: Do not use this method elsewhere, instead use <see cref="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.Create(Loretta.CodeAnalysis.Lua.LuaSyntaxNode,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Text.Encoding)"/> method for creating a syntax tree.</para>
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.ParseText(System.String,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Produces a syntax tree by parsing the source text.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.ParseText(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Threading.CancellationToken)">
            <summary>
            Produces a syntax tree by parsing the source text.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.WithChangedText(Loretta.CodeAnalysis.Text.SourceText)">
            <summary>
            Creates a new syntax based off this tree using a new source text.
            </summary>
            <remarks>
            If the new source text is a minor change from the current source text an incremental parse will occur
            reusing most of the current syntax tree internal data.  Otherwise, a full parse will occur using the new
            source text.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetChangedSpans(Loretta.CodeAnalysis.SyntaxTree)">
            <summary>
            Produces a pessimistic list of spans that denote the regions of text in this tree that
            are changed from the text of the old tree.
            </summary>
            <param name="oldTree">The old tree. Cannot be <c>null</c>.</param>
            <remarks>The list is pessimistic because it may claim more or larger regions than actually changed.</remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetChanges(Loretta.CodeAnalysis.SyntaxTree)">
            <summary>
            Gets a list of text changes that when applied to the old tree produce this tree.
            </summary>
            <param name="oldTree">The old tree. Cannot be <c>null</c>.</param>
            <remarks>The list of changes may be different than the original changes that produced this tree.</remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetLineSpan(Loretta.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the location in terms of path, line and column for a given span.
            </summary>
            <param name="span">Span within the tree.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            <see cref="T:Loretta.CodeAnalysis.FileLinePositionSpan"/> that contains path, line and column information.
            </returns>
            <remarks>The values are not affected by line mapping directives (<c>#line</c>).</remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetLocation(Loretta.CodeAnalysis.Text.TextSpan)">
            <summary>
            Gets a <see cref="T:Loretta.CodeAnalysis.Location"/> for the specified text <paramref name="span"/>.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetDiagnostics(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Gets a list of all the diagnostics in the sub tree that has the specified node as its root.
            </summary>
            <remarks>
            This method does not filter diagnostics based on <c>#pragma</c>s and compiler options
            like /nowarn, /warnaserror etc.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetDiagnostics(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Gets a list of all the diagnostics associated with the token and any related trivia.
            </summary>
            <remarks>
            This method does not filter diagnostics based on <c>#pragma</c>s and compiler options
            like /nowarn, /warnaserror etc.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetDiagnostics(Loretta.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Gets a list of all the diagnostics associated with the trivia.
            </summary>
            <remarks>
            This method does not filter diagnostics based on <c>#pragma</c>s and compiler options
            like /nowarn, /warnaserror etc.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetDiagnostics(Loretta.CodeAnalysis.SyntaxNodeOrToken)">
            <summary>
            Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or
            associated with the token and its related trivia.
            </summary>
            <remarks>
            This method does not filter diagnostics based on <c>#pragma</c>s and compiler options
            like /nowarn, /warnaserror etc.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetDiagnostics(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all the diagnostics in the syntax tree.
            </summary>
            <remarks>
            This method does not filter diagnostics based on <c>#pragma</c>s and compiler options
            like /nowarn, /warnaserror etc.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetRootCore(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.TryGetRootCore(Loretta.CodeAnalysis.SyntaxNode@)">
            <inheritdoc/>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.OptionsCore">
            <inheritdoc/>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1">
            <summary>
            Represents a <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> visitor that visits only the single
            <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> passed into its Visit method and produces a value
            of the type specified by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TResult">
            The type of the return value this visitor's Visit method.
            </typeparam>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitSkippedTokensTrivia(Loretta.CodeAnalysis.Lua.Syntax.SkippedTokensTriviaSyntax)">
            <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitStatementList(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Called when the visitor visits a StatementListSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitNamedParameter(Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax)">
            <summary>Called when the visitor visits a NamedParameterSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitVarArgParameter(Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax)">
            <summary>Called when the visitor visits a VarArgParameterSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitParameterList(Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax)">
            <summary>Called when the visitor visits a ParameterListSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitIdentifierKeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax)">
            <summary>Called when the visitor visits a IdentifierKeyedTableFieldSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitExpressionKeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax)">
            <summary>Called when the visitor visits a ExpressionKeyedTableFieldSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitUnkeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax)">
            <summary>Called when the visitor visits a UnkeyedTableFieldSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitSimpleFunctionName(Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax)">
            <summary>Called when the visitor visits a SimpleFunctionNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitMemberFunctionName(Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax)">
            <summary>Called when the visitor visits a MemberFunctionNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitMethodFunctionName(Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax)">
            <summary>Called when the visitor visits a MethodFunctionNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitStringFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax)">
            <summary>Called when the visitor visits a StringFunctionArgumentSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitTableConstructorFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax)">
            <summary>Called when the visitor visits a TableConstructorFunctionArgumentSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitExpressionListFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax)">
            <summary>Called when the visitor visits a ExpressionListFunctionArgumentSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitAnonymousFunctionExpression(Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax)">
            <summary>Called when the visitor visits a AnonymousFunctionExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitTableConstructorExpression(Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax)">
            <summary>Called when the visitor visits a TableConstructorExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitLiteralExpression(Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax)">
            <summary>Called when the visitor visits a LiteralExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitVarArgExpression(Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax)">
            <summary>Called when the visitor visits a VarArgExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitIdentifierName(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax)">
            <summary>Called when the visitor visits a IdentifierNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitMemberAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax)">
            <summary>Called when the visitor visits a MemberAccessExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitElementAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax)">
            <summary>Called when the visitor visits a ElementAccessExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitUnaryExpression(Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax)">
            <summary>Called when the visitor visits a UnaryExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitBinaryExpression(Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax)">
            <summary>Called when the visitor visits a BinaryExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitElseIfExpressionClause(Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax)">
            <summary>Called when the visitor visits a ElseIfExpressionClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitIfExpression(Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax)">
            <summary>Called when the visitor visits a IfExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitParenthesizedExpression(Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax)">
            <summary>Called when the visitor visits a ParenthesizedExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitFunctionCallExpression(Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax)">
            <summary>Called when the visitor visits a FunctionCallExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitMethodCallExpression(Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax)">
            <summary>Called when the visitor visits a MethodCallExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitEqualsValuesClause(Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax)">
            <summary>Called when the visitor visits a EqualsValuesClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitAssignmentStatement(Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax)">
            <summary>Called when the visitor visits a AssignmentStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitCompoundAssignmentStatement(Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax)">
            <summary>Called when the visitor visits a CompoundAssignmentStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitLocalVariableDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax)">
            <summary>Called when the visitor visits a LocalVariableDeclarationStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitNumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax)">
            <summary>Called when the visitor visits a NumericForStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitGenericForStatement(Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax)">
            <summary>Called when the visitor visits a GenericForStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitWhileStatement(Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax)">
            <summary>Called when the visitor visits a WhileStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitRepeatUntilStatement(Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax)">
            <summary>Called when the visitor visits a RepeatUntilStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitIfStatement(Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax)">
            <summary>Called when the visitor visits a IfStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitElseIfClause(Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax)">
            <summary>Called when the visitor visits a ElseIfClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitElseClause(Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax)">
            <summary>Called when the visitor visits a ElseClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitGotoStatement(Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax)">
            <summary>Called when the visitor visits a GotoStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitBreakStatement(Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax)">
            <summary>Called when the visitor visits a BreakStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitReturnStatement(Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax)">
            <summary>Called when the visitor visits a ReturnStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitContinueStatement(Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax)">
            <summary>Called when the visitor visits a ContinueStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitLocalFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax)">
            <summary>Called when the visitor visits a LocalFunctionDeclarationStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax)">
            <summary>Called when the visitor visits a FunctionDeclarationStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitDoStatement(Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax)">
            <summary>Called when the visitor visits a DoStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitGotoLabelStatement(Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax)">
            <summary>Called when the visitor visits a GotoLabelStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitExpressionStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax)">
            <summary>Called when the visitor visits a ExpressionStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitEmptyStatement(Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax)">
            <summary>Called when the visitor visits a EmptyStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor`1.VisitCompilationUnit(Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax)">
            <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor">
            <summary>
            Represents a <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> visitor that visits only the single LuaSyntaxNode
            passed into its Visit method.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitSkippedTokensTrivia(Loretta.CodeAnalysis.Lua.Syntax.SkippedTokensTriviaSyntax)">
            <summary>Called when the visitor visits a SkippedTokensTriviaSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitStatementList(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Called when the visitor visits a StatementListSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitNamedParameter(Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax)">
            <summary>Called when the visitor visits a NamedParameterSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitVarArgParameter(Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax)">
            <summary>Called when the visitor visits a VarArgParameterSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitParameterList(Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax)">
            <summary>Called when the visitor visits a ParameterListSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitIdentifierKeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax)">
            <summary>Called when the visitor visits a IdentifierKeyedTableFieldSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitExpressionKeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax)">
            <summary>Called when the visitor visits a ExpressionKeyedTableFieldSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitUnkeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax)">
            <summary>Called when the visitor visits a UnkeyedTableFieldSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitSimpleFunctionName(Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax)">
            <summary>Called when the visitor visits a SimpleFunctionNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitMemberFunctionName(Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax)">
            <summary>Called when the visitor visits a MemberFunctionNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitMethodFunctionName(Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax)">
            <summary>Called when the visitor visits a MethodFunctionNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitStringFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax)">
            <summary>Called when the visitor visits a StringFunctionArgumentSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitTableConstructorFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax)">
            <summary>Called when the visitor visits a TableConstructorFunctionArgumentSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitExpressionListFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax)">
            <summary>Called when the visitor visits a ExpressionListFunctionArgumentSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitAnonymousFunctionExpression(Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax)">
            <summary>Called when the visitor visits a AnonymousFunctionExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitTableConstructorExpression(Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax)">
            <summary>Called when the visitor visits a TableConstructorExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitLiteralExpression(Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax)">
            <summary>Called when the visitor visits a LiteralExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitVarArgExpression(Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax)">
            <summary>Called when the visitor visits a VarArgExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitIdentifierName(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax)">
            <summary>Called when the visitor visits a IdentifierNameSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitMemberAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax)">
            <summary>Called when the visitor visits a MemberAccessExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitElementAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax)">
            <summary>Called when the visitor visits a ElementAccessExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitUnaryExpression(Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax)">
            <summary>Called when the visitor visits a UnaryExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitBinaryExpression(Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax)">
            <summary>Called when the visitor visits a BinaryExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitElseIfExpressionClause(Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax)">
            <summary>Called when the visitor visits a ElseIfExpressionClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitIfExpression(Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax)">
            <summary>Called when the visitor visits a IfExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitParenthesizedExpression(Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax)">
            <summary>Called when the visitor visits a ParenthesizedExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitFunctionCallExpression(Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax)">
            <summary>Called when the visitor visits a FunctionCallExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitMethodCallExpression(Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax)">
            <summary>Called when the visitor visits a MethodCallExpressionSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitEqualsValuesClause(Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax)">
            <summary>Called when the visitor visits a EqualsValuesClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitAssignmentStatement(Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax)">
            <summary>Called when the visitor visits a AssignmentStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitCompoundAssignmentStatement(Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax)">
            <summary>Called when the visitor visits a CompoundAssignmentStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitLocalVariableDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax)">
            <summary>Called when the visitor visits a LocalVariableDeclarationStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitNumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax)">
            <summary>Called when the visitor visits a NumericForStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitGenericForStatement(Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax)">
            <summary>Called when the visitor visits a GenericForStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitWhileStatement(Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax)">
            <summary>Called when the visitor visits a WhileStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitRepeatUntilStatement(Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax)">
            <summary>Called when the visitor visits a RepeatUntilStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitIfStatement(Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax)">
            <summary>Called when the visitor visits a IfStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitElseIfClause(Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax)">
            <summary>Called when the visitor visits a ElseIfClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitElseClause(Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax)">
            <summary>Called when the visitor visits a ElseClauseSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitGotoStatement(Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax)">
            <summary>Called when the visitor visits a GotoStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitBreakStatement(Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax)">
            <summary>Called when the visitor visits a BreakStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitReturnStatement(Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax)">
            <summary>Called when the visitor visits a ReturnStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitContinueStatement(Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax)">
            <summary>Called when the visitor visits a ContinueStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitLocalFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax)">
            <summary>Called when the visitor visits a LocalFunctionDeclarationStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax)">
            <summary>Called when the visitor visits a FunctionDeclarationStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitDoStatement(Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax)">
            <summary>Called when the visitor visits a DoStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitGotoLabelStatement(Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax)">
            <summary>Called when the visitor visits a GotoLabelStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitExpressionStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax)">
            <summary>Called when the visitor visits a ExpressionStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitEmptyStatement(Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax)">
            <summary>Called when the visitor visits a EmptyStatementSyntax node.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor.VisitCompilationUnit(Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax)">
            <summary>Called when the visitor visits a CompilationUnitSyntax node.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker">
            <summary>
            Represents a <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxVisitor"/> that descends an entire <see cref="T:Loretta.CodeAnalysis.Lua.LuaSyntaxNode"/> graph
            visiting each LuaSyntaxNode and its child SyntaxNodes and <see cref="T:Loretta.CodeAnalysis.SyntaxToken"/>s in depth-first order.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.Depth">
            <summary>
            The depth up to which the walker should go into.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.#ctor(Loretta.CodeAnalysis.SyntaxWalkerDepth)">
            <summary>
            Initializes the syntax walker with hte provided depth.
            </summary>
            <param name="depth"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.Visit(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Called when the syntax walker visits a node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.DefaultVisit(Loretta.CodeAnalysis.SyntaxNode)">
            <summary>
            Called when the walker walks into a node.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.VisitToken(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Called when the walker visits a token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.VisitLeadingTrivia(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Called when the walker should visit the leading trivia of a token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.VisitTrailingTrivia(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Called when the walker should visit the trailing trivia of a token.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.LuaSyntaxWalker.VisitTrivia(Loretta.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Called when the walker visits a trivia.
            </summary>
            <param name="trivia"></param>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.SimpleSyntaxReference">
            <summary>
            this is a basic do-nothing implementation of a syntax reference
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.SyntaxExtensions">
            <summary>
            Extension methods for the Lua syntax.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxExtensions.NormalizeWhitespace(Loretta.CodeAnalysis.SyntaxToken,System.String,System.Boolean)">
            <summary>
            Creates a new syntax token with all whitespace and end of line trivia replaced with
            regularly formatted trivia.
            </summary>
            <param name="token">The token to normalize.</param>
            <param name="indentation">A sequence of whitespace characters that defines a single level of indentation.</param>
            <param name="elasticTrivia">If true the replaced trivia is elastic trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxExtensions.NormalizeWhitespace(Loretta.CodeAnalysis.SyntaxToken,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new syntax token with all whitespace and end of line trivia replaced with
            regularly formatted trivia.
            </summary>
            <param name="token">The token to normalize.</param>
            <param name="indentation">An optional sequence of whitespace characters that defines a
            single level of indentation.</param>
            <param name="eol">An optional sequence of whitespace characters used for end of line.</param>
            <param name="elasticTrivia">If true the replaced trivia is elastic trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxExtensions.NormalizeWhitespace(Loretta.CodeAnalysis.SyntaxTriviaList,System.String,System.Boolean)">
            <summary>
            Creates a new syntax trivia list with all whitespace and end of line trivia replaced with
            regularly formatted trivia.
            </summary>
            <param name="list">The trivia list to normalize.</param>
            <param name="indentation">A sequence of whitespace characters that defines a single level of indentation.</param>
            <param name="elasticTrivia">If true the replaced trivia is elastic trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxExtensions.NormalizeWhitespace(Loretta.CodeAnalysis.SyntaxTriviaList,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new syntax trivia list with all whitespace and end of line trivia replaced with
            regularly formatted trivia.
            </summary>
            <param name="list">The trivia list to normalize.</param>
            <param name="indentation">An optional sequence of whitespace characters that defines a
            single level of indentation.</param>
            <param name="eol">An optional sequence of whitespace characters used for end of line.</param>
            <param name="elasticTrivia">If true the replaced trivia is elastic trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxExtensions.ToSyntaxTriviaList(System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a <see cref="T:Loretta.CodeAnalysis.SyntaxTriviaList"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Loretta.CodeAnalysis.SyntaxTrivia"/>.
            </summary>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.SyntaxFactory">
            <summary>
            A class containing factory methods for constructing syntax nodes, tokens and trivia.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.CarriageReturnLineFeed">
            <summary>
            A trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.LineFeed">
            <summary>
            A trivia with kind EndOfLineTrivia containing a single line feed character.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.CarriageReturn">
            <summary>
            A trivia with kind EndOfLineTrivia containing a single carriage return character.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.Space">
            <summary>
             A trivia with kind WhitespaceTrivia containing a single space character.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.Tab">
            <summary>
            A trivia with kind WhitespaceTrivia containing a single tab character.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticCarriageReturnLineFeed">
            <summary>
            An elastic trivia with kind EndOfLineTrivia containing both the carriage return and line feed characters.
            Elastic trivia are used to denote trivia that was not produced by parsing source text, and are usually not
            preserved during formatting.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticLineFeed">
            <summary>
            An elastic trivia with kind EndOfLineTrivia containing a single line feed character. Elastic trivia are used
            to denote trivia that was not produced by parsing source text, and are usually not preserved during
            formatting.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticCarriageReturn">
            <summary>
            An elastic trivia with kind EndOfLineTrivia containing a single carriage return character. Elastic trivia
            are used to denote trivia that was not produced by parsing source text, and are usually not preserved during
            formatting.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticSpace">
            <summary>
            An elastic trivia with kind WhitespaceTrivia containing a single space character. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticTab">
            <summary>
            An elastic trivia with kind WhitespaceTrivia containing a single tab character. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticMarker">
            <summary>
            An elastic trivia with kind WhitespaceTrivia containing no characters. Elastic marker trivia are included
            automatically by factory methods when trivia is not specified. Syntax formatting will replace elastic
            markers with appropriate trivia.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.EndOfLine(System.String)">
            <summary>
            Creates a trivia with kind EndOfLineTrivia containing the specified text. 
            </summary>
            <param name="text">The text of the end of line. Any text can be specified here, however only carriage return and
            line feed characters are recognized by the parser as end of line.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticEndOfLine(System.String)">
            <summary>
            Creates a trivia with kind EndOfLineTrivia containing the specified text. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
            <param name="text">The text of the end of line. Any text can be specified here, however only carriage return and
            line feed characters are recognized by the parser as end of line.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Whitespace(System.String)">
            <summary>
            Creates a trivia with kind WhitespaceTrivia containing the specified text.
            </summary>
            <param name="text">The text of the whitespace. Any text can be specified here, however only specific
            whitespace characters are recognized by the parser.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElasticWhitespace(System.String)">
            <summary>
            Creates a trivia with kind WhitespaceTrivia containing the specified text. Elastic trivia are used to
            denote trivia that was not produced by parsing source text, and are usually not preserved during formatting.
            </summary>
            <param name="text">The text of the whitespace. Any text can be specified here, however only specific
            whitespace characters are recognized by the parser.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Comment(System.String)">
            <summary>
            Creates a trivia with kind either SingleLineCommentTrivia or MultiLineCommentTrivia containing the specified
            text.
            </summary>
            <param name="text">The entire text of the comment including the leading '--' or '//' token for single line
            comments or stop or start tokens for multiline comments.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SyntaxTrivia(Loretta.CodeAnalysis.Lua.SyntaxKind,System.String)">
            <summary>
            Trivia nodes represent parts of the program text that are not parts of the
            syntactic grammar, such as spaces, newlines, shebangs and comments.
            </summary>
            <param name="kind">
            A <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> representing the specific kind of <see cref="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SyntaxTrivia(Loretta.CodeAnalysis.Lua.SyntaxKind,System.String)"/>. One of
            <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ShebangTrivia"/>, <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EndOfLineTrivia"/>,
            <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SingleLineCommentTrivia"/>, <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MultiLineCommentTrivia"/>,
            <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.WhitespaceTrivia"/>
            </param>
            <param name="text">
            The actual text of this token.
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Token(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Creates a token corresponding to a syntax kind. This method can be used for token syntax kinds whose text
            can be inferred by the kind alone.
            </summary>
            <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Token(Loretta.CodeAnalysis.SyntaxTriviaList,Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a token corresponding to syntax kind. This method can be used for token syntax kinds whose text can
            be inferred by the kind alone.
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Token(Loretta.CodeAnalysis.SyntaxTriviaList,Loretta.CodeAnalysis.Lua.SyntaxKind,System.String,System.String,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a token corresponding to syntax kind. This method gives control over token Text and ValueText.
            
            For example, consider the text '&lt;see cref="operator &amp;#43;"/&gt;'.  To create a token for the value of
            the operator symbol (&amp;#43;), one would call 
            Token(default(SyntaxTriviaList), SyntaxKind.PlusToken, "&amp;#43;", "+", default(SyntaxTriviaList)).
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
            <param name="text">The text from which this token was created (e.g. lexed).</param>
            <param name="valueText">How Lua should interpret the text of this token.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MissingToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an
            expected token is not found. A missing token has no text and normally has associated diagnostics.
            </summary>
            <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MissingToken(Loretta.CodeAnalysis.SyntaxTriviaList,Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a missing token corresponding to syntax kind. A missing token is produced by the parser when an
            expected token is not found. A missing token has no text and normally has associated diagnostics.
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="kind">A syntax kind value for a token. These have the suffix Token or Keyword.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Identifier(System.String)">
            <summary>
            Creates a token with kind IdentifierToken containing the specified text.
            <param name="text">The text of the identifier name.</param>
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Identifier(Loretta.CodeAnalysis.SyntaxTriviaList,System.String,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a token with kind IdentifierToken containing the specified text.
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="text">The text of the identifier name.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Identifier(Loretta.CodeAnalysis.SyntaxTriviaList,Loretta.CodeAnalysis.Lua.SyntaxKind,System.String,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a token with kind IdentifierToken containing the specified text.
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="contextualKind">An alternative SyntaxKind that can be inferred for this token in special
            contexts. These are usually keywords.</param>
            <param name="text">The raw text of the identifier name, including any escapes or leading '@'
            character.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
            
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal(System.Double)">
            <summary>
            Creates a token with kind NumericLiteralToken from an 8-byte floating point value.
            </summary>
            <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal(System.String,System.Double)">
            <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
            </summary>
            <param name="text">The raw text of the literal.</param>
            <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal(Loretta.CodeAnalysis.SyntaxTriviaList,System.String,System.Double,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a token with kind NumericLiteralToken from the text and corresponding 8-byte floating point value.
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="text">The raw text of the literal.</param>
            <param name="value">The 8-byte floating point value to be represented by the returned token.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal(System.String)">
            <summary>
            Creates a token with kind StringLiteralToken from a string value.
            </summary>
            <param name="value">The string value to be represented by the returned token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal(System.String,System.String)">
            <summary>
            Creates a token with kind StringLiteralToken from the text and corresponding string value.
            </summary>
            <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
            <param name="value">The string value to be represented by the returned token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Literal(Loretta.CodeAnalysis.SyntaxTriviaList,System.String,System.String,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a token with kind StringLiteralToken from the text and corresponding string value.
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="text">The raw text of the literal, including quotes and escape sequences.</param>
            <param name="value">The string value to be represented by the returned token.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.BadToken(Loretta.CodeAnalysis.SyntaxTriviaList,System.String,Loretta.CodeAnalysis.SyntaxTriviaList)">
            <summary>
            Creates a token with kind BadToken.
            </summary>
            <param name="leading">A list of trivia immediately preceding the token.</param>
            <param name="text">The raw text of the bad token.</param>
            <param name="trailing">A list of trivia immediately following the token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.List``1">
            <summary>
            Creates an empty list of syntax nodes.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SingletonList``1(``0)">
            <summary>
            Creates a singleton list of syntax nodes.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
            <param name="node">The single element node.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.List``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a list of syntax nodes.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
            <param name="nodes">A sequence of element nodes.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TokenList">
            <summary>
            Creates an empty list of tokens.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TokenList(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a singleton list of tokens.
            </summary>
            <param name="token">The single token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TokenList(Loretta.CodeAnalysis.SyntaxToken[])">
            <summary>
            Creates a list of tokens.
            </summary>
            <param name="tokens">An array of tokens.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TokenList(System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxToken})">
            <summary>
            Creates a list of tokens.
            </summary>
            <param name="tokens"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.Trivia(Loretta.CodeAnalysis.Lua.Syntax.StructuredTriviaSyntax)">
            <summary>
            Creates a trivia from a StructuredTriviaSyntax node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TriviaList">
            <summary>
            Creates an empty list of trivia.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TriviaList(Loretta.CodeAnalysis.SyntaxTrivia)">
            <summary>
            Creates a singleton list of trivia.
            </summary>
            <param name="trivia">A single trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TriviaList(Loretta.CodeAnalysis.SyntaxTrivia[])">
            <summary>
            Creates a list of trivia.
            </summary>
            <param name="trivias">An array of trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TriviaList(System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxTrivia})">
            <summary>
            Creates a list of trivia.
            </summary>
            <param name="trivias">A sequence of trivia.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SeparatedList``1">
            <summary>
            Creates an empty separated list.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SingletonSeparatedList``1(``0)">
            <summary>
            Creates a singleton separated list.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
            <param name="node">A single node.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a separated list of nodes from a sequence of nodes, synthesizing comma separators in between.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
            <param name="nodes">A sequence of syntax nodes.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxToken})">
            <summary>
            Creates a separated list of nodes from a sequence of nodes and a sequence of separator tokens.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
            <param name="nodes">A sequence of syntax nodes.</param>
            <param name="separators">A sequence of token to be interleaved between the nodes. The number of tokens must
            be one less than the number of nodes.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SeparatedList``1(System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxNodeOrToken})">
            <summary>
            Creates a separated list from a sequence of nodes and tokens, starting with a node and alternating between additional nodes and separator tokens.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
            <param name="nodesAndTokens">A sequence of nodes or tokens, alternating between nodes and separator tokens.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SeparatedList``1(Loretta.CodeAnalysis.SyntaxNodeOrTokenList)">
            <summary>
            Creates a separated list from a <see cref="T:Loretta.CodeAnalysis.SyntaxNodeOrTokenList"/>, where the list elements start with a node and then alternate between
            additional nodes and separator tokens.
            </summary>
            <typeparam name="TNode">The specific type of the element nodes.</typeparam>
            <param name="nodesAndTokens">The list of nodes and tokens.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NodeOrTokenList">
            <summary>
            Creates an empty <see cref="T:Loretta.CodeAnalysis.SyntaxNodeOrTokenList"/>.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NodeOrTokenList(System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.SyntaxNodeOrToken})">
            <summary>
            Create a <see cref="T:Loretta.CodeAnalysis.SyntaxNodeOrTokenList"/> from a sequence of <see cref="T:Loretta.CodeAnalysis.SyntaxNodeOrToken"/>.
            </summary>
            <param name="nodesAndTokens">The sequence of nodes and tokens</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NodeOrTokenList(Loretta.CodeAnalysis.SyntaxNodeOrToken[])">
            <summary>
            Create a <see cref="T:Loretta.CodeAnalysis.SyntaxNodeOrTokenList"/> from one or more <see cref="T:Loretta.CodeAnalysis.SyntaxNodeOrToken"/>.
            </summary>
            <param name="nodesAndTokens">The nodes and tokens</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IdentifierName(System.String)">
            <summary>
            Creates an <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax"/> node.
            </summary>
            <param name="name">The identifier name.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SyntaxTree(Loretta.CodeAnalysis.SyntaxNode,Loretta.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding)">
            <summary>
            Create a new syntax tree from a syntax node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseSyntaxTree(System.String,Loretta.CodeAnalysis.ParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.ParseText(System.String,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseSyntaxTree(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.ParseOptions,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.ParseText(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseLeadingTrivia(System.String,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.Int32)">
            <summary>
            Parse a list of trivia rules for leading trivia.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseLeadingTrivia(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a list of trivia rules for leading trivia.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseTrailingTrivia(System.String,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.Int32)">
            <summary>
            Parse a list of trivia using the parsing rules for trailing trivia.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseTrailingTrivia(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a list of trivia using the parsing rules for trailing trivia.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseToken(System.String,System.Int32,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a Lua language token.
            </summary>
            <param name="text">The text of the token including leading and trailing trivia.</param>
            <param name="offset">Optional offset into text.</param>
            <param name="options">Parse options.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseToken(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a Lua language token.
            </summary>
            <param name="text">The text of the token including leading and trailing trivia.</param>
            <param name="options">Parse options.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseTokens(System.String,System.Int32,System.Int32,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a sequence of Lua language tokens.
            </summary>
            <param name="text">The text of all the tokens.</param>
            <param name="initialTokenPosition">An integer to use as the starting position of the first token.</param>
            <param name="offset">Optional offset into text.</param>
            <param name="options">Parse options.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseTokens(Loretta.CodeAnalysis.Text.SourceText,System.Int32,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a sequence of Lua language tokens.
            </summary>
            <param name="text">The text of all the tokens.</param>
            <param name="initialTokenPosition">An integer to use as the starting position of the first token.</param>
            <param name="options">Parse options.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseExpression(System.String,System.Int32,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.Boolean)">
            <summary>
            Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions.
            </summary>
            <param name="text">The text of the expression.</param>
            <param name="offset">Optional offset into text.</param>
            <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
            <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseExpression(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.Boolean)">
            <summary>
            Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions.
            </summary>
            <param name="text">The text of the expression.</param>
            <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
            <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseStatement(System.String,System.Int32,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.Boolean)">
            <summary>
            Parse a StatementSyntaxNode using grammar rule for statements.
            </summary>
            <param name="text">The text of the statement.</param>
            <param name="offset">Optional offset into text.</param>
            <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
            <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseStatement(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.Boolean)">
            <summary>
            Parse a StatementSyntaxNode using grammar rule for statements.
            </summary>
            <param name="text">The text of the statement.</param>
            <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
            <param name="consumeFullText">True if extra tokens in the input should be treated as an error</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax"/> using the grammar rule for an entire compilation unit (file). To produce a
            <see cref="T:Loretta.CodeAnalysis.SyntaxTree"/> instance, use <see cref="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.ParseText(System.String,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
            instead.
            </summary>
            <param name="text">The text of the compilation unit.</param>
            <param name="offset">Optional offset into text.</param>
            <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParseCompilationUnit(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions)">
            <summary>
            Parse a <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax"/> using the grammar rule for an entire compilation unit (file). To produce a
            <see cref="T:Loretta.CodeAnalysis.SyntaxTree"/> instance, use <see cref="M:Loretta.CodeAnalysis.Lua.LuaSyntaxTree.ParseText(Loretta.CodeAnalysis.Text.SourceText,Loretta.CodeAnalysis.Lua.LuaParseOptions,System.String,System.Threading.CancellationToken)"/>
            instead.
            </summary>
            <param name="text">The text of the compilation unit.</param>
            <param name="options">The optional parse options to use. If no options are specified default options are
            used.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MakeSourceText(System.String,System.Int32)">
            <summary>
            Helper method for wrapping a string in a SourceText.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent(Loretta.CodeAnalysis.SyntaxTree,Loretta.CodeAnalysis.SyntaxTree,System.Boolean)">
            <summary>
            Determines if two trees are the same, disregarding trivia differences.
            </summary>
            <param name="oldTree">The original tree.</param>
            <param name="newTree">The new tree.</param>
            <param name="topLevel"> 
            If true then the trees are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent(Loretta.CodeAnalysis.SyntaxNode,Loretta.CodeAnalysis.SyntaxNode,System.Boolean)">
            <summary>
            Determines if two syntax nodes are the same, disregarding trivia differences.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
            <param name="topLevel"> 
            If true then the nodes are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent(Loretta.CodeAnalysis.SyntaxNode,Loretta.CodeAnalysis.SyntaxNode,System.Func{Loretta.CodeAnalysis.Lua.SyntaxKind,System.Boolean})">
            <summary>
            Determines if two syntax nodes are the same, disregarding trivia differences.
            </summary>
            <param name="oldNode">The old node.</param>
            <param name="newNode">The new node.</param>
            <param name="ignoreChildNode">
            If specified called for every child syntax node (not token) that is visited during the comparison. 
            If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Determines if two syntax tokens are the same, disregarding trivia differences.
            </summary>
            <param name="oldToken">The old token.</param>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent(Loretta.CodeAnalysis.SyntaxTokenList,Loretta.CodeAnalysis.SyntaxTokenList)">
            <summary>
            Determines if two lists of tokens are the same, disregarding trivia differences.
            </summary>
            <param name="oldList">The old token list.</param>
            <param name="newList">The new token list.</param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent``1(Loretta.CodeAnalysis.SyntaxList{``0},Loretta.CodeAnalysis.SyntaxList{``0},System.Boolean)">
            <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
            <param name="oldList">The old list.</param>
            <param name="newList">The new list.</param>
            <param name="topLevel"> 
            If true then the nodes are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent``1(Loretta.CodeAnalysis.SyntaxList{``0},Loretta.CodeAnalysis.SyntaxList{``0},System.Func{Loretta.CodeAnalysis.Lua.SyntaxKind,System.Boolean})">
            <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
            <param name="oldList">The old list.</param>
            <param name="newList">The new list.</param>
            <param name="ignoreChildNode">
            If specified called for every child syntax node (not token) that is visited during the comparison. 
            If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent``1(Loretta.CodeAnalysis.SeparatedSyntaxList{``0},Loretta.CodeAnalysis.SeparatedSyntaxList{``0},System.Boolean)">
            <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
            <param name="oldList">The old list.</param>
            <param name="newList">The new list.</param>
            <param name="topLevel"> 
            If true then the nodes are equivalent if the contained nodes and tokens declaring
            metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies
            or initializer expressions, otherwise all nodes and tokens must be equivalent. 
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AreEquivalent``1(Loretta.CodeAnalysis.SeparatedSyntaxList{``0},Loretta.CodeAnalysis.SeparatedSyntaxList{``0},System.Func{Loretta.CodeAnalysis.Lua.SyntaxKind,System.Boolean})">
            <summary>
            Determines if two lists of syntax nodes are the same, disregarding trivia differences.
            </summary>
            <param name="oldList">The old list.</param>
            <param name="newList">The new list.</param>
            <param name="ignoreChildNode">
            If specified called for every child syntax node (not token) that is visited during the comparison. 
            If it returns true the child is recursively visited, otherwise the child and its subtree is disregarded.
            </param>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.StatementList(Loretta.CodeAnalysis.Lua.Syntax.StatementSyntax[])">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax"/> instance.
            </summary>
            <param name="statements"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.StatementList(System.Collections.Generic.IEnumerable{Loretta.CodeAnalysis.Lua.Syntax.StatementSyntax})">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax"/> instance.
            </summary>
            <param name="statements"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AssignmentStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax},Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax})">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax"/> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax},Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax})">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax"/> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SkippedTokensTrivia">
            <summary>Creates a new SkippedTokensTriviaSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.StatementList(Loretta.CodeAnalysis.SyntaxList{Loretta.CodeAnalysis.Lua.Syntax.StatementSyntax})">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.StatementList">
            <summary>Creates a new StatementListSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NamedParameter(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.NamedParameterSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.VarArgParameter(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.VarArgParameterSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.VarArgParameter">
            <summary>Creates a new VarArgParameterSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParameterList(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ParameterSyntax},Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParameterList(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ParameterSyntax})">
            <summary>Creates a new ParameterListSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IdentifierKeyedTableField(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.IdentifierKeyedTableFieldSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IdentifierKeyedTableField(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new IdentifierKeyedTableFieldSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IdentifierKeyedTableField(System.String,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new IdentifierKeyedTableFieldSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ExpressionKeyedTableField(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ExpressionKeyedTableFieldSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ExpressionKeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new ExpressionKeyedTableFieldSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.UnkeyedTableField(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.UnkeyedTableFieldSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.SimpleFunctionName(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.SimpleFunctionNameSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MemberFunctionName(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.MemberFunctionNameSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MemberFunctionName(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>Creates a new MemberFunctionNameSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MemberFunctionName(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax,System.String)">
            <summary>Creates a new MemberFunctionNameSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MethodFunctionName(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.MethodFunctionNameSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MethodFunctionName(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>Creates a new MethodFunctionNameSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.StringFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.StringFunctionArgumentSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TableConstructorFunctionArgument(Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorFunctionArgumentSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ExpressionListFunctionArgument(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax},Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ExpressionListFunctionArgumentSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ExpressionListFunctionArgument(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax})">
            <summary>Creates a new ExpressionListFunctionArgumentSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AnonymousFunctionExpression(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.AnonymousFunctionExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AnonymousFunctionExpression(Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new AnonymousFunctionExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AnonymousFunctionExpression">
            <summary>Creates a new AnonymousFunctionExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TableConstructorExpression(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.TableFieldSyntax},Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.TableConstructorExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.TableConstructorExpression(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.TableFieldSyntax})">
            <summary>Creates a new TableConstructorExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LiteralExpression(Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.LiteralExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LiteralExpression(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>Creates a new LiteralExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.VarArgExpression(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.VarArgExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.VarArgExpression">
            <summary>Creates a new VarArgExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IdentifierName(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MemberAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.MemberAccessExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MemberAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>Creates a new MemberAccessExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MemberAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,System.String)">
            <summary>Creates a new MemberAccessExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElementAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ElementAccessExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElementAccessExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new ElementAccessExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.UnaryExpression(Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.BinaryExpression(Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseIfExpressionClause(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax" />
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseIfExpressionClause(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new ElseIfExpressionClauseSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IfExpression(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax},Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.IfExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IfExpression(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ElseIfExpressionClauseSyntax},Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new IfExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IfExpression(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new IfExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParenthesizedExpression(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ParenthesizedExpressionSyntax" />
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ParenthesizedExpression(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new ParenthesizedExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.FunctionCallExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.FunctionArgumentSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.FunctionCallExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MethodCallExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.FunctionArgumentSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.MethodCallExpressionSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MethodCallExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.FunctionArgumentSyntax)">
            <summary>Creates a new MethodCallExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.MethodCallExpression(Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,System.String,Loretta.CodeAnalysis.Lua.Syntax.FunctionArgumentSyntax)">
            <summary>Creates a new MethodCallExpressionSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.EqualsValuesClause(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax})">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.EqualsValuesClause(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax})">
            <summary>Creates a new EqualsValuesClauseSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AssignmentStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax},Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.AssignmentStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.AssignmentStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax},Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax)">
            <summary>Creates a new AssignmentStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.CompoundAssignmentStatement(Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.CompoundAssignmentStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.CompoundAssignmentStatement(Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.Lua.Syntax.PrefixExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new CompoundAssignmentStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax},Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.LocalVariableDeclarationStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax},Loretta.CodeAnalysis.Lua.Syntax.EqualsValuesClauseSyntax)">
            <summary>Creates a new LocalVariableDeclarationStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalVariableDeclarationStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax})">
            <summary>Creates a new LocalVariableDeclarationStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.NumericForStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new NumericForStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new NumericForStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.NumericForStatement(System.String,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new NumericForStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GenericForStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax},Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax},Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.GenericForStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GenericForStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax},Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax},Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new GenericForStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GenericForStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax},Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax})">
            <summary>Creates a new GenericForStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.WhileStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.WhileStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.WhileStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new WhileStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.WhileStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new WhileStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.RepeatUntilStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.RepeatUntilStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.RepeatUntilStatement(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new RepeatUntilStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.RepeatUntilStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new RepeatUntilStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IfStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax},Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.IfStatementSyntax" /> comment.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IfStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax},Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax)">
            <summary>Creates a new IfStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.IfStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new IfStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseIfClause(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ElseIfClauseSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseIfClause(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new ElseIfClauseSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseIfClause(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new ElseIfClauseSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseClause(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ElseClauseSyntax" /> comment.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ElseClause(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new ElseClauseSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GotoStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.GotoStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GotoStatement(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>Creates a new GotoStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GotoStatement(System.String)">
            <summary>Creates a new GotoStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.BreakStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.BreakStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.BreakStatement">
            <summary>Creates a new BreakStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ReturnStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax},Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ReturnStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ReturnStatement(Loretta.CodeAnalysis.SeparatedSyntaxList{Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax})">
            <summary>Creates a new ReturnStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ContinueStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ContinueStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ContinueStatement">
            <summary>Creates a new ContinueStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax,Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.LocalFunctionDeclarationStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax,Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new LocalFunctionDeclarationStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.IdentifierNameSyntax)">
            <summary>Creates a new LocalFunctionDeclarationStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.LocalFunctionDeclarationStatement(System.String)">
            <summary>Creates a new LocalFunctionDeclarationStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.FunctionDeclarationStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax,Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.FunctionDeclarationStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.FunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax,Loretta.CodeAnalysis.Lua.Syntax.ParameterListSyntax,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new FunctionDeclarationStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.FunctionDeclarationStatement(Loretta.CodeAnalysis.Lua.Syntax.FunctionNameSyntax)">
            <summary>Creates a new FunctionDeclarationStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.DoStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.DoStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.DoStatement(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new DoStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GotoLabelStatement(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.GotoLabelStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GotoLabelStatement(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>Creates a new GotoLabelStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.GotoLabelStatement(System.String)">
            <summary>Creates a new GotoLabelStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ExpressionStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.ExpressionStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.ExpressionStatement(Loretta.CodeAnalysis.Lua.Syntax.ExpressionSyntax)">
            <summary>Creates a new ExpressionStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.EmptyStatement(Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.EmptyStatementSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.EmptyStatement">
            <summary>Creates a new EmptyStatementSyntax instance.</summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.CompilationUnit(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax,Loretta.CodeAnalysis.SyntaxToken)">
            <summary>
            Creates a new <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.CompilationUnitSyntax" /> node.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFactory.CompilationUnit(Loretta.CodeAnalysis.Lua.Syntax.StatementListSyntax)">
            <summary>Creates a new CompilationUnitSyntax instance.</summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.SyntaxFacts">
            <summary>
            A static class containing facts about Lua's Syntax.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsComment(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether a <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a comment's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsRightAssociative(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether a given <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a right associative operator's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsReservedKeyword(Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.Lua.LuaSyntaxOptions)">
            <summary>
            Checks whether a given kind is a reserved keyword.
            </summary>
            <param name="actual"></param>
            <param name="syntaxOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsContextualKeyword(Loretta.CodeAnalysis.Lua.SyntaxKind,Loretta.CodeAnalysis.Lua.LuaSyntaxOptions)">
            <summary>
            Checks whether a given kind is a contextual keyword.
            </summary>
            <param name="kind"></param>
            <param name="syntaxOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.RequiresSeparator(Loretta.CodeAnalysis.Lua.SyntaxKind,System.String,Loretta.CodeAnalysis.Lua.SyntaxKind,System.String)">
            <summary>
            Whether two tokens/trivia require a separator between them.
            </summary>
            <param name="kindA"></param>
            <param name="kindAText"></param>
            <param name="kindB"></param>
            <param name="kindBText"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetConstantValue(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Obtains the constant value of the token kind.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetCompoundAssignmentOperator(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Obtains the kind of the operator of the compound assignment operator.
            </summary>
            <param name="kind">The the compound operator kind.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetCompoundAssignmentStatement(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Obtains the kind of the compound assignment operator node from the
            assignment operator kind.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetLiteralExpression(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Obtains the kind of the literal expression node from the token kind.
            </summary>
            <param name="kind">The token's kind.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetOperatorTokenKind(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Obtains the operator token's kind from the expression node kind.
            </summary>
            <param name="kind">The unary expression node's kind.</param>
            <returns></returns>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxFacts.EqualityComparer">
            <summary>
            A custom equality comparer for <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>
            </summary>
            <remarks>
            PERF: The framework specializes EqualityComparer for enums, but only if the underlying type is System.Int32
            Since SyntaxKind's underlying type is System.UInt16, ObjectEqualityComparer will be chosen instead.
            </remarks>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetUnaryOperatorPrecedence(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the precedence for a given unary operator or 0 if not a unary operator.
            </summary>
            <param name="kind"></param>
            <returns>
            A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator.
            </returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetUnaryExpression(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the expression kind for a given unary operator or None if not a unary operator.
            </summary>
            <param name="kind"></param>
            <returns>
            A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator.
            </returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetBinaryOperatorPrecedence(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the precedence for a given binary operator. Returns 0 if kind is not a binary operator.
            </summary>
            <param name="kind"></param>
            <returns>
            A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator.
            </returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetBinaryExpression(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the expression kind for a given unary operator or None if not a unary operator.
            </summary>
            <param name="kind"></param>
            <returns>
            A positive number indicating the binary operator precedence or 0 if the kind is not a binary operator.
            </returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetKeywordKind(System.String)">
            <summary>
            Returns the <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> for a given keyword or <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.IdentifierName"/> if not a keyword.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetKeywordKind(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns the <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> for a given keyword or <see cref="F:Loretta.CodeAnalysis.Lua.SyntaxKind.IdentifierName"/> if not a keyword.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetUnaryOperatorKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that can be considered unary operators.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetBinaryOperatorKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that can be considered binary operators.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetText(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Gets the predefined text that corresponds to the provided syntax kind.
            </summary>
            <param name="kind">The kind to obtain the text for.</param>
            <returns>The text corresponding to the provided kind or <see cref="F:System.String.Empty" /> if none.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsTrivia(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a trivia's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsKeyword(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a keyword's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a token's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsOperatorToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a operatortoken's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsUnaryOperatorToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a unaryoperatortoken's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsBinaryOperatorToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a binaryoperatortoken's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsCompoundAssignmentOperatorToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a compoundassignmentoperatortoken's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetCompoundAssignmentOperatorTokenKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that are in the CompoundAssignmentOperatorToken category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsLiteralToken(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a literaltoken's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetLiteralTokenKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that are in the LiteralToken category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsFunctionExpressionOrDeclaration(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a functionexpressionordeclaration's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetFunctionExpressionOrDeclarationKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that are in the FunctionExpressionOrDeclaration category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsVariableExpression(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a variableexpression's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetVariableExpressionKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that are in the VariableExpression category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsUnaryExpression(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a unaryexpression's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetUnaryExpressionKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that are in the UnaryExpression category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsBinaryExpression(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a binaryexpression's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetBinaryExpressionKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that are in the BinaryExpression category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.IsCompoundAssignmentStatement(Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Checks whether the provided <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a compoundassignmentstatement's.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxFacts.GetCompoundAssignmentStatementKinds">
            <summary>
            Returns all <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/>s that are in the CompoundAssignmentStatement category.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.DocumentationCommentTrivia">
            <summary>
            Documentation comment kinds.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.CompoundAssignmentOperatorToken">
            <summary>
            Tokens that can be used as the assignment operator in compound assignments.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.LiteralToken">
            <summary>
            Tokens that result in literal expressions.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.VariableExpression">
            <summary>
            Kinds that belong to <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.VariableExpressionSyntax"/>.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.UnaryExpression">
            <summary>
            Kinds that belong to <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.UnaryExpressionSyntax"/>.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.BinaryExpression">
            <summary>
            Kinds that belong to <see cref="T:Loretta.CodeAnalysis.Lua.Syntax.BinaryExpressionSyntax"/>.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.FunctionExpressionOrDeclaration">
            <summary>
            Kinds that belong to function expressions or declarations.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindCategory.CompoundAssignmentStatement">
            <summary>
            Kinds that belong to compound assignment statements.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindProperty.CompoundAssignmentOperator">
            <summary>
            The operator token that is the operation done by the compound assignment token/expression kind that has this property.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindProperty.CompoundAssignmentStatement">
            <summary>
            The compound assignment expression that the operator token that contains this property results into.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindProperty.LiteralExpression">
            <summary>
            The kind of the expression the literal token that has this property results into.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindProperty.ConstantValue">
            <summary>
            The value the literal that has this property results into.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKindProperty.OperatorTokenKind">
            <summary>
            The kind of the operator token that results in the expression that contains this property.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.OpenParenthesisToken">
            <summary>
            Represents the <c>(</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.CloseParenthesisToken">
            <summary>
            Represents the <c>)</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.OpenBracketToken">
            <summary>
            Represents the <c>[</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.CloseBracketToken">
            <summary>
            Represents the <c>]</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.OpenBraceToken">
            <summary>
            Represents the <c>{</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.CloseBraceToken">
            <summary>
            Represents the <c>}</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SemicolonToken">
            <summary>
            Represents the <c>;</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ColonToken">
            <summary>
            Represents the <c>:</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.CommaToken">
            <summary>
            Represents the <c>,</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.HashToken">
            <summary>
            Represents the <c>#</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.PlusToken">
            <summary>
            Represents the <c>+</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.PlusEqualsToken">
            <summary>
            Represents the <c>+=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MinusToken">
            <summary>
            Represents the <c>-</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.MinusEqualsToken">
            <summary>
            Represents the <c>-=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.StarToken">
            <summary>
            Represents the <c>*</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.StarEqualsToken">
            <summary>
            Represents the <c>*=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SlashToken">
            <summary>
            Represents the <c>/</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.SlashEqualsToken">
            <summary>
            Represents the <c>/=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.HatToken">
            <summary>
            Represents the <c>^</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.HatEqualsToken">
            <summary>
            Represents the <c>^=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.PercentToken">
            <summary>
            Represents the <c>%</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.PercentEqualsToken">
            <summary>
            Represents the <c>%=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DotToken">
            <summary>
            Represents the <c>.</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DotDotToken">
            <summary>
            Represents the <c>..</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DotDotDotToken">
            <summary>
            Represents the <c>...</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DotDotEqualsToken">
            <summary>
            Represents the <c>..=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EqualsToken">
            <summary>
            Represents the <c>=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EqualsEqualsToken">
            <summary>
            Represents the <c>==</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.TildeEqualsToken">
            <summary>
            Represents the <c>~=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.BangToken">
            <summary>
            Represents the <c>!</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.BangEqualsToken">
            <summary>
            Represents the <c>!=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LessThanToken">
            <summary>
            Represents the <c>&lt;</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LessThanEqualsToken">
            <summary>
            Represents the <c>&lt;=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LessThanLessThanToken">
            <summary>
            Represents the <c>&lt;&lt;</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GreaterThanToken">
            <summary>
            Represents the <c>></c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GreaterThanEqualsToken">
            <summary>
            Represents the <c>>=</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GreaterThanGreaterThanToken">
            <summary>
            Represents the <c>>></c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.AmpersandToken">
            <summary>
            Represents the <c>&amp;</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.AmpersandAmpersandToken">
            <summary>
            Represents the <c>&amp;&amp;</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.PipeToken">
            <summary>
            Represents the <c>|</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.PipePipeToken">
            <summary>
            Represents the <c>||</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ColonColonToken">
            <summary>
            Represents the <c>::</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.TildeToken">
            <summary>
            Represents the <c>~</c> token.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.DoKeyword">
            <summary>
            Represents the <see langword="do"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.EndKeyword">
            <summary>
            Represents the <see langword="end"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.WhileKeyword">
            <summary>
            Represents the <see langword="while"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.RepeatKeyword">
            <summary>
            Represents the <see langword="repeat"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.UntilKeyword">
            <summary>
            Represents the <see langword="util"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.IfKeyword">
            <summary>
            Represents the <see langword="if"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ThenKeyword">
            <summary>
            Represents the <see langword="then"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ElseIfKeyword">
            <summary>
            Represents the <see langword="elseif"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ElseKeyword">
            <summary>
            Represents the <see langword="else"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ForKeyword">
            <summary>
            Represents the <see langword="for"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.InKeyword">
            <summary>
            Represents the <see langword="in"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.FunctionKeyword">
            <summary>
            Represents the <see langword="function"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.LocalKeyword">
            <summary>
            Represents the <see langword="local"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ReturnKeyword">
            <summary>
            Represents the <see langword="return"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.BreakKeyword">
            <summary>
            Represents the <see langword="break"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.GotoKeyword">
            <summary>
            Represents the <see langword="goto"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.ContinueKeyword">
            <summary>
            Represents the <see langword="continue"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.AndKeyword">
            <summary>
            Represents the <see langword="and"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.OrKeyword">
            <summary>
            Represents the <see langword="or"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.NotKeyword">
            <summary>
            Represents the <see langword="not"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.NilKeyword">
            <summary>
            Represents the <see langword="nil"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.TrueKeyword">
            <summary>
            Represents the <see langword="true"/> keyword.
            </summary>
        </member>
        <member name="F:Loretta.CodeAnalysis.Lua.SyntaxKind.FalseKeyword">
            <summary>
            Represents the <see langword="false"/> keyword.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.SyntaxTreeDiagnosticEnumerator">
            <summary>
            An enumerator for diagnostic lists.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.SyntaxTreeDiagnosticEnumerator.MoveNext">
            <summary>
            Moves the enumerator to the next diagnostic instance in the diagnostic list.
            </summary>
            <returns>Returns true if enumerator moved to the next diagnostic, false if the
            enumerator was at the end of the diagnostic list.</returns>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.SyntaxTreeDiagnosticEnumerator.Current">
            <summary>
            The current diagnostic that the enumerator is pointing at.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Utilities.CharUtils">
            <summary>
            A general character utility class.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsInRange(System.Char,System.Char,System.Char)">
            <summary>
            Checks whether the provided <paramref name="value" /> is in the range [<paramref
            name="start" />, <paramref name="end" />].
            </summary>
            <param name="start">The first character of the range (inclusive).</param>
            <param name="value">The character to check for.</param>
            <param name="end">The last character of the range (inclusive).</param>
            <returns>Whether the provided character is in the range.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.AsciiLowerCase(System.Char)">
            <summary>
            Converts the provided ASCII character into lower-case ASCII.
            </summary>
            <param name="ch">The character to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.InnerIsInRangesIndexCheck(System.Int32)">
            <summary>
            Checks if the provided character is in the middle of any of the ranges
            in the provided (sorted and flattened) list.
            </summary>
            <param name="idx">The index found by binary search.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsInRanges(System.Collections.Immutable.ImmutableArray{System.Char},System.Char)">
            <summary>
            Checks if the provided character is in the middle of any of the ranges
            in the provided SORTED AND FLATTENED range list.
            </summary>
            <param name="ranges">The sorted and flattened list.</param>
            <param name="ch">The character to find.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsInRanges(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
            Checks if the provided character is in the middle of any of the ranges
            in the provided SORTED AND FLATTENED range list.
            </summary>
            <param name="ranges">The sorted and flattened list.</param>
            <param name="ch">The character to find.</param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.CreateCategoryFlagSet(System.Collections.Generic.IEnumerable{System.Globalization.UnicodeCategory})">
            <summary>
            Creates a flagset from a list of unicode categories.
            </summary>
            <param name="unicodeCategories"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsCategoryInSet(System.UInt32,System.Globalization.UnicodeCategory)">
            <summary>
            Checks if the provided category is in the flagset.
            </summary>
            <param name="flagSet"></param>
            <param name="unicodeCategory"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsDecimal(System.Char)">
            <summary>
            Checks whether the provided character is a decimal character (between 0 and 9).
            </summary>
            <param name="ch">The character to check.</param>
            <returns>Whether the provided character is a decimal character.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsHexadecimal(System.Char)">
            <summary>
            Checks whether the provided character is a hexadecimal character.
            </summary>
            <param name="ch">The character to check.</param>
            <returns>Whether the provided character is hexadecimal.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsAlpha(System.Char)">
            <summary>
            Checks whether the provided character is an alpha character (a-z, A-Z).
            </summary>
            <param name="ch">The character to check.</param>
            <returns>Whether the provided character is an alpha character.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsAlphaNumeric(System.Char)">
            <summary>
            Checks whether the provided character is an alphanumeric character (a-z, A-Z, 0-9).
            </summary>
            <param name="ch">The character to check.</param>
            <returns>Whether the provided character is an alphanumeric character.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsWhitespace(System.Char)">
            <summary>
            Checks whether the provided character is whitespace
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsValidFirstIdentifierChar(System.Char)">
            <summary>
            Checks whether the provided character is a valid first identifier character.
            </summary>
            <param name="ch">The character to check.</param>
            
            <returns>Whether the provided character is a valid first identifier character.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.IsValidTrailingIdentifierChar(System.Char)">
            <summary>
            Checks whether the provided character is a valid trailing identifier character.
            </summary>
            <param name="ch">The character to check.</param>
            
            <returns>Whether the provided character is a valid trailing identifier character.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.CharUtils.EncodeCharToUtf8(System.Char)">
            <summary>
            Encodes the provided character into a hexadecimal escape sequence representing its UTF-8 bytes.
            </summary>
            <param name="ch">The character to encode.</param>
            <returns>The provided character encoded in UTF-8 hexadecimal escape sequences.</returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.Utilities.StringUtils">
            <summary>
            A class with utilities for strings.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.StringUtils.IsIdentifier(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns whether the provided string is a valid identifier.
            </summary>
            <param name="value">The string to check.</param>
            <returns>Whether the provided string is a valid identifier.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.Lua.Utilities.StringUtils.IsIdentifier(System.String)">
             <summary>
             Returns whether the provided string is a valid identifier.
             </summary>
             <param name="value">The string to check.</param>
            
             <returns>Whether the provided string is a valid identifier.</returns>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.ExtraCategoriesAttribute">
            <summary>
            The extra categories attribute
            Can be checked by the Is{CategoryName} methods in SyntaxFacts.
            All members of a category can also be retrieved by the Get{CategoryName} methods in SyntaxFacts.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.PropertyAttribute">
            <summary>
            Properties associated with the enum value.
            Can be retrieved from the Get{Key} methods in SyntaxFacts.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.TriviaAttribute">
            <summary>
            The trivia indicator attribute.
            Indicates to the SyntaxFacts Source Generator that this <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a trivia's.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.TokenAttribute">
            <summary>
            The token indicator attribute.
            Indicates to the SyntaxFacts Source Generator that this <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a token's.
            May optionally indicate a fixed text for the token.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.TokenAttribute.Text">
            <summary>
            The <see cref="T:Loretta.CodeAnalysis.SyntaxToken"/>'s fixed text.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.KeywordAttribute">
            <summary>
            The keyword indicator attribute.
            Indicates to the SyntaxFacts Source Generator that this <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a keywords's
            and the keyword fixed text.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.KeywordAttribute.Text">
            <summary>
            The keyword's text.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.UnaryOperatorAttribute">
            <summary>
            The unary operator indicator attribute.
            Indicates to the SyntaxFacts Source Generator that this
            <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is an unary operator's with the
            provided precedence.
            THIS DOES NOT IMPLY THE <see cref="T:Loretta.CodeAnalysis.Lua.TokenAttribute"/>
            ATTRIBUTE.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.UnaryOperatorAttribute.Precedence">
            <summary>
            The unary operator's precedence.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.Lua.BinaryOperatorAttribute">
            <summary>
            The binary operator indicator attribute.
            Indicates to the SyntaxFacts Source Generator that
            this <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> is a binary operator's
            with the provided precedence.
            THIS DOES NOT IMPLY THE <see cref="T:Loretta.CodeAnalysis.Lua.TokenAttribute"/>
            ATTRIBUTE.
            </summary>
        </member>
        <member name="P:Loretta.CodeAnalysis.Lua.BinaryOperatorAttribute.Precedence">
            <summary>
            The binary operator's precedence.
            </summary>
        </member>
        <member name="T:Loretta.CodeAnalysis.LuaExtensions">
            <summary>
            Extension methods for lua specific data.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IsKind(Loretta.CodeAnalysis.SyntaxToken,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Determines if <see cref="T:Loretta.CodeAnalysis.SyntaxToken"/> is of a specified kind.
            </summary>
            <param name="token">The source token.</param>
            <param name="kind">The syntax kind to test for.</param>
            <returns><see langword="true"/> if the token is of the specified kind; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IsKind(Loretta.CodeAnalysis.SyntaxTrivia,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Determines if <see cref="T:Loretta.CodeAnalysis.SyntaxTrivia"/> is of a specified kind.
            </summary>
            <param name="trivia">The source trivia.</param>
            <param name="kind">The syntax kind to test for.</param>
            <returns><see langword="true"/> if the trivia is of the specified kind; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IsKind(Loretta.CodeAnalysis.SyntaxNode,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Determines if <see cref="T:Loretta.CodeAnalysis.SyntaxNode"/> is of a specified kind.
            </summary>
            <param name="node">The source node.</param>
            <param name="kind">The syntax kind to test for.</param>
            <returns><see langword="true"/> if the node is of the specified kind; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IsKind(Loretta.CodeAnalysis.SyntaxNodeOrToken,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Determines if <see cref="T:Loretta.CodeAnalysis.SyntaxNodeOrToken"/> is of a specified kind.
            </summary>
            <param name="nodeOrToken">The source node or token.</param>
            <param name="kind">The syntax kind to test for.</param>
            <returns><see langword="true"/> if the node or token is of the specified kind; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IndexOf``1(Loretta.CodeAnalysis.SyntaxList{``0},Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the index of the first node of a specified kind in the node list.
            </summary>
            <param name="list">Node list.</param>
            <param name="kind">The <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> to find.</param>
            <returns>Returns non-negative index if the list contains a node which matches <paramref name="kind"/>, -1 otherwise.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.Any``1(Loretta.CodeAnalysis.SyntaxList{``0},Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            True if the list has at least one node of the specified kind.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IndexOf``1(Loretta.CodeAnalysis.SeparatedSyntaxList{``0},Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the index of the first node of a specified kind in the node list.
            </summary>
            <param name="list">Node list.</param>
            <param name="kind">The <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> to find.</param>
            <returns>Returns non-negative index if the list contains a node which matches <paramref name="kind"/>, -1 otherwise.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.Any``1(Loretta.CodeAnalysis.SeparatedSyntaxList{``0},Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            True if the list has at least one node of the specified kind.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IndexOf(Loretta.CodeAnalysis.SyntaxTriviaList,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the index of the first trivia of a specified kind in the trivia list.
            </summary>
            <param name="list">Trivia list.</param>
            <param name="kind">The <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> to find.</param>
            <returns>Returns non-negative index if the list contains a trivia which matches <paramref name="kind"/>, -1 otherwise.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.Any(Loretta.CodeAnalysis.SyntaxTriviaList,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            True if the list has at least one trivia of the specified kind.
            </summary>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.IndexOf(Loretta.CodeAnalysis.SyntaxTokenList,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Returns the index of the first token of a specified kind in the token list.
            </summary>
            <param name="list">Token list.</param>
            <param name="kind">The <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> to find.</param>
            <returns>Returns non-negative index if the list contains a token which matches <paramref name="kind"/>, -1 otherwise.</returns>
        </member>
        <member name="M:Loretta.CodeAnalysis.LuaExtensions.Any(Loretta.CodeAnalysis.SyntaxTokenList,Loretta.CodeAnalysis.Lua.SyntaxKind)">
            <summary>
            Tests whether a list contains a token of a particular kind.
            </summary>
            <param name="list"></param>
            <param name="kind">The <see cref="T:Loretta.CodeAnalysis.Lua.SyntaxKind"/> to test for.</param>
            <returns>Returns true if the list contains a token which matches <paramref name="kind"/></returns>
        </member>
    </members>
</doc>
